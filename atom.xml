<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rearib的个人博客</title>
  
  <subtitle>面朝大海,春暖花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-01T14:46:43.434Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rearib</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django-编辑器Markdown的使用</title>
    <link href="http://yoursite.com/2018/09/01/django-%E7%BC%96%E8%BE%91%E5%99%A8Markdown%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/01/django-编辑器Markdown的使用/</id>
    <published>2018-09-01T14:46:43.000Z</published>
    <updated>2018-09-01T14:46:43.434Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>django-编辑器Ueditor的使用</title>
    <link href="http://yoursite.com/2018/09/01/django-%E7%BC%96%E8%BE%91%E5%99%A8Ueditor%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/01/django-编辑器Ueditor的使用/</id>
    <published>2018-09-01T14:46:26.000Z</published>
    <updated>2018-09-01T15:39:13.086Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Ueditor是比较流行的富文本编辑器,主要用于内容的编辑、排版和图片上传等。本文主要介绍Ueditor的安装并搭配xadmin的使用。</p><h1 id="富文本编辑器Ueditor"><a href="#富文本编辑器Ueditor" class="headerlink" title="富文本编辑器Ueditor"></a>富文本编辑器Ueditor</h1><p>&emsp;&emsp;UEditor是由百度web前端研发部开发所见即所得富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源基于MIT协议，允许自由使用和修改代码。</p><h1 id="Ueditor的源码安装"><a href="#Ueditor的源码安装" class="headerlink" title="Ueditor的源码安装"></a>Ueditor的源码安装</h1><p>&emsp;&emsp;前往<a href="https://github.com/twz915/DjangoUeditor3/" target="_blank" rel="noopener">github</a>下载源码然后解压，把DjangoUeditor文件夹拷贝到项目目录(extra_apps)下面。</p><h1 id="setting和url中的配置"><a href="#setting和url中的配置" class="headerlink" title="setting和url中的配置"></a>setting和url中的配置</h1><ul><li><p>settings中添加app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>MxOnline/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(&apos;ueditor/&apos;,include(&apos;DjangoUeditor.urls&apos; )),</span><br></pre></td></tr></table></figure></li></ul><h1 id="model和adminx中的配置"><a href="#model和adminx中的配置" class="headerlink" title="model和adminx中的配置"></a>model和adminx中的配置</h1><ul><li><p>course/models.py中Course修改detail字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Course(models.Model):</span><br><span class="line">    # detail = models.TextField(&quot;课程详情&quot;)</span><br><span class="line">    detail = UEditorField(verbose_name=u&apos;课程详情&apos;, width=600, height=300, imagePath=&quot;courses/ueditor/&quot;,</span><br><span class="line">                          filePath=&quot;courses/ueditor/&quot;, default=&apos;&apos;)</span><br></pre></td></tr></table></figure></li><li><p>xadmin/plugs目录下新建ueditor.py文件,代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView</span><br><span class="line">from DjangoUeditor.models import UEditorField</span><br><span class="line">from DjangoUeditor.widgets import UEditorWidget</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class XadminUEditorWidget(UEditorWidget):</span><br><span class="line">    def __init__(self, **kwargs):</span><br><span class="line">        self.ueditor_options = kwargs</span><br><span class="line">        self.Media.js = None</span><br><span class="line">        super(XadminUEditorWidget,self).__init__(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UeditorPlugin(BaseAdminPlugin):</span><br><span class="line">    def get_field_style(self, attrs, db_field, style, **kwargs):</span><br><span class="line">        if style == &apos;ueditor&apos;:</span><br><span class="line">            if isinstance(db_field, UEditorField):</span><br><span class="line">                widget = db_field.formfield().widget</span><br><span class="line">                param = &#123;&#125;</span><br><span class="line">                param.update(widget.ueditor_settings)</span><br><span class="line">                param.update(widget.attrs)</span><br><span class="line">                return &#123;&apos;widget&apos;:XadminUEditorWidget(**param)&#125;</span><br><span class="line">        return attrs</span><br><span class="line"></span><br><span class="line">    def block_extrahead(self, context, nodes):</span><br><span class="line">        js  = &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; %(settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;)</span><br><span class="line">        js += &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; %(settings.STATIC_URL + &quot;ueditor/ueditor.all.min.js&quot;)</span><br><span class="line">        nodes.append(js)</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)</span><br><span class="line">xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)</span><br></pre></td></tr></table></figure></li><li><p>xadmin/plugs/<strong>init</strong>.py里面添加ueditor插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PLUGINS = (</span><br><span class="line">   &apos;ueditor&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>course/adminx.py中使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class CourseAdmin(object):</span><br><span class="line">    #detail就是要显示为富文本的字段名</span><br><span class="line">    style_fields = &#123;&quot;detail&quot;: &quot;ueditor&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="xadmin后台效果："><a href="#xadmin后台效果：" class="headerlink" title="xadmin后台效果："></a>xadmin后台效果：</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/django-编辑器Ueditor的使用/20180901113023930.png" alt=""><br>&emsp;&emsp;但是前段显示还是会有问题:<br><img src="http://pe5izyf7a.bkt.clouddn.com/django-编辑器Ueditor的使用/20180901112749059.png" alt=""><br>&emsp;&emsp;这是因为需要在模板中必须关闭Django的自动转义才能正常显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">&#123;&#123; course.detail &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure></p><h1 id="最终显示效果"><a href="#最终显示效果" class="headerlink" title="最终显示效果:"></a>最终显示效果:</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/django-编辑器Ueditor的使用/20180901113054800.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;Ueditor是比较流行的富文本编辑器,主要用于内容的编辑、排版和图片上传等。本文主要介绍Ueditor的安装并搭配xadmin的使用。&lt;/p&gt;
&lt;h1 id=&quot;富文本编辑器Ueditor&quot;&gt;&lt;a href=&quot;#富文本编辑器Ueditor&quot; clas
      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="文本编辑" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>在线教育平台Mxonline-用户登录注册功能的实现</title>
    <link href="http://yoursite.com/2018/09/01/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0Mxonline-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/09/01/在线教育平台Mxonline-用户登录注册功能的实现/</id>
    <published>2018-09-01T05:11:33.000Z</published>
    <updated>2018-09-01T14:45:25.819Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;对于web网站，小到一个博客系统，大到购物平台，用户管理是不可或缺的。包括了用户的注册、登录、修改重置密码、修改个人信息等，今天就来聊一聊用户管理那些事儿~</p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>&emsp;&emsp;其实django自带了一个用户认证模块，django.contrib.auth，auth模块是对登录认证方法的一种封装，之前我们获取用户输入的用户名及密码后需要自己从user表里查询有没有用户名和密码符合的对象，而有了auth模块之后就可以很轻松的去验证用户的登录信息是否存在于数据库中。</p><h2 id="auth里的方法"><a href="#auth里的方法" class="headerlink" title="auth里的方法"></a>auth里的方法</h2><ul><li><strong>authenticate():</strong><br>提供了用户认证，即验证用户名以及密码是否正确，如果认证信息有效，会返回一个 User 对象。authenticate()会在 User 对象上设置一个属性标识表明认证后端认证了该用户，且该信息在后面的登录过程中是需要的。当我们试图登陆一个从数据库中直接取出来不经过authenticate()的User对象会报错的！！<blockquote><p>user = authenticate(username=’someone’,password=’somepassword’)</p></blockquote></li><li><p><strong>login(HttpRequest, user):</strong><br>该函数接受一个HttpRequest对象，以及一个认证了的User对象，此函数使用django的session框架给某个已认证的用户附加上session id等信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username = request.POST[&apos;username&apos;]</span><br><span class="line">password = request.POST[&apos;password&apos;]</span><br><span class="line">user = authenticate(username=username, password=password)</span><br><span class="line">if user is not None:</span><br><span class="line">   login(request, user)</span><br></pre></td></tr></table></figure></li><li><p><strong>logout(request):</strong><br>该函数接受一个HttpRequest对象，无返回值。当调用该函数时，当前请求的session信息会全部清除。该用户即使没有登录，使用该函数也不会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def logout_view(request):</span><br><span class="line">    logout(request)</span><br></pre></td></tr></table></figure></li><li><p><strong>user对象的 is_authenticated():</strong><br>要求：<br>1  用户登陆后才能访问某些页面，<br>2  如果用户没有登录就访问该页面的话直接跳到登录页面<br>3  用户在跳转的登陆界面中完成登陆后，自动访问跳转到之前访问的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def my_view(request):</span><br><span class="line">   if not request.user.is_authenticated():</span><br><span class="line">      return redirect(&apos;%s?next=%s&apos; % (settings.LOGIN_URL, request.path))</span><br></pre></td></tr></table></figure></li></ul><p>对于用户是否登录的认证还有其他方法,比如修饰器和类的继承方式:</p><h2 id="用户是否登录认证的其他方式"><a href="#用户是否登录认证的其他方式" class="headerlink" title="用户是否登录认证的其他方式"></a>用户是否登录认证的其他方式</h2><h3 id="修饰器方式"><a href="#修饰器方式" class="headerlink" title="修饰器方式"></a>修饰器方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line">@login_required</span><br><span class="line">def my_view(request):</span><br></pre></td></tr></table></figure><p>若用户没有登录，则会跳转到django默认的登录URL ‘/accounts/login/ ‘ (这个值可以在settings文件中通过LOGIN_URL进行修改)。并传递  当前访问url的绝对路径 ( 登陆成功后，会重定向到该路径 )。</p><h3 id="LoginRequiredMixin"><a href="#LoginRequiredMixin" class="headerlink" title="LoginRequiredMixin"></a>LoginRequiredMixin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line">from django.shortcuts import reverse</span><br><span class="line"></span><br><span class="line">LOGIN_URL = &apos;/users/login/&apos;</span><br><span class="line"></span><br><span class="line">class LoginRequiredMixin(object):</span><br><span class="line">    @method_decorator(login_required(login_url=LOGIN_URL))</span><br><span class="line">    def dispatch(self,request,*args,**kwargs):</span><br><span class="line">        return super(LoginRequiredMixin, self).dispatch(request,*args,**kwargs)</span><br><span class="line">        </span><br><span class="line">class ImageUploadView(LoginRequiredMixin,View):</span><br></pre></td></tr></table></figure><ul><li>user对象<blockquote><p>username 用户名<br>password（必填项）password用哈希算法保存到数据库<br>is_staff ： 用户是否拥有网站的管理权限.<br>is_active ： 是否允许用户登录, 设置为False，可以不用删除用户来禁止用户登录<br>check_password(passwd) 如果给定的字符串通过了密码检查，返回  True<br>set_password() 修改密码</p></blockquote></li></ul><h2 id="自定义user表"><a href="#自定义user表" class="headerlink" title="自定义user表"></a>自定义user表</h2><p>&emsp;&emsp;以上的所有操作，都是针对django自动创建的auth_user表，如果要用auth模块，就必须要使用（或继承）这张表。继承表的好处是我们可以增加一些自己需要的字段，并且同时可以使用auth模块提供的接口、方法,而我们项目中的UserProfile就是继承该表.</p><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;对于web网站，小到一个博客系统，大到购物平台，用户管理是不可或缺的。包括了用户的注册、登录、修改重置密码、修改个人信息等，今天就来聊一聊用户管理那些事儿~&lt;/p&gt;
&lt;h1 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="django项目" scheme="http://yoursite.com/tags/django%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Mxonline" scheme="http://yoursite.com/tags/Mxonline/"/>
    
  </entry>
  
  <entry>
    <title>在线教育平台Mxonline-xadmin的使用</title>
    <link href="http://yoursite.com/2018/09/01/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0Mxonline-xadmin%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/01/在线教育平台Mxonline-xadmin的使用/</id>
    <published>2018-09-01T05:10:09.000Z</published>
    <updated>2018-09-01T14:37:09.777Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;django自带了admin用于后台管理，但是在github上还有一个更好看、功能更强大的库来管理后台，叫xadmin，今天就来好好介绍一下xadmin的使用。</p><h1 id="xadmin的安装"><a href="#xadmin的安装" class="headerlink" title="xadmin的安装"></a>xadmin的安装</h1><p>&emsp;&emsp;通过<a href="https://xadmin.readthedocs.io/en/docs-chinese/quickstart.html" target="_blank" rel="noopener">文档</a>我们可以发现，我们有两种方法可以进行安装。</p><ol><li>使用pip install 安装<blockquote><p>pip install django-xadmin</p></blockquote></li><li>下载源码安装<blockquote><p>需要安装requirements.txt中的依赖包</p></blockquote></li></ol><p>&emsp;&emsp;关于源码安装，首先到github搜索 <a href="https://github.com/sshwsfc/xadmin" target="_blank" rel="noopener">xadmin</a>下载源码，然后在项目的工程目录下新建一个extra_apps，把源码放在该目录下，注意extra_apps需要与apps一样在settings中设置。这里不在重复叙述了，然后手动安装requirements.txt中的依赖包。最后在INSTALLED_APPS中添加xadmin和crispy_forms。<br>&emsp;&emsp;接下来配置url:</p><blockquote><p>from extra_apps import xadmin<br>url(r’^xadmin/‘, xadmin.site.urls),</p></blockquote><p>&emsp;&emsp;然后执行migrations和migrate生成数据库表并创建superuser.就可以访问登录啦</p><h1 id="注册app到xadmin后台"><a href="#注册app到xadmin后台" class="headerlink" title="注册app到xadmin后台"></a>注册app到xadmin后台</h1><ol><li>在app文件夹中新建adminx.py:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line">#xadmin中这里是继承object，不再是继承admin</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 显示的列</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]</span><br><span class="line">    # 搜索的字段，不要添加时间搜索</span><br><span class="line">    search_fields = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;]</span><br><span class="line">    # 过滤</span><br><span class="line">    list_filter = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]</span><br><span class="line">xadmin.site.register(EmailVerifyRecord,EmailVerifyRecordAdmin)</span><br></pre></td></tr></table></figure></li></ol><h1 id="xadmin的全局配置"><a href="#xadmin的全局配置" class="headerlink" title="xadmin的全局配置"></a>xadmin的全局配置</h1><ul><li>全局配置,包括title和footer等</li><li>app名称汉化，菜单收叠。</li><li>使用Xadmin的主题功能。</li></ul><figure class="highlight plain"><figcaption><span>全局配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from xadmin import views</span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    # 修改title</span><br><span class="line">    site_title = &apos;Mxonline后台管理界面&apos;</span><br><span class="line">    # 修改footer</span><br><span class="line">    site_footer = &apos;在线教育平台&apos;</span><br><span class="line">    # 收起菜单</span><br><span class="line">    menu_style = &apos;accordion&apos;</span><br><span class="line">    #将title和footer信息进行注册</span><br><span class="line">xadmin.site.register(views.CommAdminView,GlobalSettings)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>主题功能</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from xadmin import views</span><br><span class="line">#创建xadmin的最基本管理器配置，并与view绑定</span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    # 开启主题功能</span><br><span class="line">    enable_themes = True</span><br><span class="line">    use_bootswatch = True</span><br><span class="line">#将基本配置管理与view绑定</span><br><span class="line">xadmin.site.register(views.BaseAdminView,BaseSetting)</span><br></pre></td></tr></table></figure><h1 id="修改app的名字"><a href="#修改app的名字" class="headerlink" title="修改app的名字"></a>修改app的名字</h1><p>&emsp;&emsp;在后台左侧的app显示还是英文,如果要设置为中文需要在apps.py中添加verbose_name,然后在<strong>init</strong>.py中添加default_app_config.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apps.py</span><br><span class="line">from django.apps import AppConfig</span><br><span class="line">class UsersConfig(AppConfig):</span><br><span class="line">    name = &apos;users&apos;</span><br><span class="line">    verbose_name = &apos;用户&apos;</span><br><span class="line">    </span><br><span class="line">__init__.py</span><br><span class="line">default_app_config = &apos;users.apps.UsersConfig&apos;</span><br></pre></td></tr></table></figure></p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/Django-xadmin打造在线教育平台-xadmin的使用/20180901044410119.png" alt=""></p><h1 id="后台用户"><a href="#后台用户" class="headerlink" title="后台用户"></a>后台用户</h1><h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><p>&emsp;&emsp;超级用户拥有所有权限，其它添加的用户默认没有任何权限。进后台添加一个用户“Editor1”,勾上“职员状态”后，这个用户才可以登录进后台。<br><img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901100248901.png" alt=""><br>&emsp;&emsp;默认没添加权限的用户登录到后台的情况如下：<br><img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901095242164.png" alt=""><br>&emsp;&emsp;使用超级管理员账号登录后为用户Editor1添加查看章节的权限后：<br><img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901100428008.png" alt=""><br>&emsp;&emsp;也可以添加一个组赋予相关权限，然后把用户添加到组中：<br><img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901100707800.png" alt=""><br>&emsp;&emsp;重新登录Editor1查看权限：<br><img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901101034415.png" alt=""><br>&emsp;&emsp;<strong>组里面的成员不但拥有自己本身的权限外，还会拥有组的权限</strong></p><h2 id="自定义icon"><a href="#自定义icon" class="headerlink" title="自定义icon"></a>自定义icon</h2><p>&emsp;&emsp;xadmin的图标采用的是第三方css样式“font awesome”,我们可以进官网下载最新的样式替代原本的，<a href="http://www.fontawesome.com.cn/" target="_blank" rel="noopener">下载地址</a><br>&emsp;&emsp;下载完后把里面的“css”和“fonts”两个文件夹拷贝到xadmin的源码（路径：xadmin/static/vendor/font-awesome）里面</p><ul><li><p>使用方法：<br>  以course为例，进官网找到图标的样式<br>  <img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901101427870.png" alt=""><br>  在course/adminx.py使用</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class CourseAdmin(object):</span><br><span class="line">    model_icon = &apos;fa fa-book&apos;</span><br></pre></td></tr></table></figure><p>  <img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901101611065.png" alt=""></p></li></ul><h1 id="后台内容设置"><a href="#后台内容设置" class="headerlink" title="后台内容设置"></a>后台内容设置</h1><h2 id="默认排序、只读字段和不显示的字段"><a href="#默认排序、只读字段和不显示的字段" class="headerlink" title="默认排序、只读字段和不显示的字段"></a>默认排序、只读字段和不显示的字段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class CourseAdmin(object):</span><br><span class="line">    &apos;&apos;&apos;课程&apos;&apos;&apos;</span><br><span class="line">    list_display = [ &apos;name&apos;,&apos;desc&apos;,&apos;detail&apos;,&apos;degree&apos;,&apos;learn_times&apos;,&apos;students&apos;]   #显示的字段</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;students&apos;]             #搜索</span><br><span class="line">    list_filter = [ &apos;name&apos;,&apos;desc&apos;,&apos;detail&apos;,&apos;degree&apos;,&apos;learn_times&apos;,&apos;students&apos;]    #过滤 </span><br><span class="line">    model_icon = &apos;fa fa-book&apos;            #图标</span><br><span class="line">    ordering = [&apos;-click_nums&apos;]           #排序</span><br><span class="line">    readonly_fields = [&apos;click_nums&apos;]     #只读字段，不能编辑</span><br><span class="line">    exclude = [&apos;fav_nums&apos;]               #不显示的字段</span><br></pre></td></tr></table></figure><h2 id="inlines添加数据"><a href="#inlines添加数据" class="headerlink" title="inlines添加数据"></a>inlines添加数据</h2><p>&emsp;&emsp;model设计时章节信息和资源指向课程,但是按之前的配置方式章节信息和课程资源需要分开添加,我们可以用inlines去实现使用添加课程的时候添加章节和课程资源.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class LessonInline(object):</span><br><span class="line">    model = Lesson</span><br><span class="line">    extra = 0</span><br><span class="line">class CourseResourceInline(object):</span><br><span class="line">    model = CourseResource</span><br><span class="line">    extra = 0</span><br><span class="line">#在CourseAdmin中使用inlines添加上面两个的方法</span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    inlines = [LessonInline,CourseResourceInline]    #增加章节和课程资源</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到在添加课程页面就可以直接添加与之关联的章节信息和资源的内容.<br><img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901102158603.png" alt=""></p><h2 id="一张表分两个Model来管理"><a href="#一张表分两个Model来管理" class="headerlink" title="一张表分两个Model来管理"></a>一张表分两个Model来管理</h2><p>比如课程里面分为轮播课程和不是轮播课程两种类型，它们是存储在同一张表,但是我们可以分开来管理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class BannerCourse(Course):</span><br><span class="line">    &apos;&apos;&apos;显示轮播课程&apos;&apos;&apos;</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;轮播课程&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        #这里必须设置proxy=True，这样就不会再生成一张表，同时还具有Model的功能</span><br><span class="line">        proxy = True   #一种继承的方式</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">普通课程和轮播课程的后台管理通过添加该函数来进行筛选.</span><br><span class="line">def queryset(self):</span><br><span class="line">    # 重载queryset方法，来过滤出我们想要的数据的</span><br><span class="line">    qs = super(CourseAdmin, self).queryset()</span><br><span class="line">    # 只显示is_banner=True的课程</span><br><span class="line">    qs = qs.filter(is_banner=False)</span><br><span class="line">    return qs</span><br></pre></td></tr></table></figure><h2 id="其他常用功能"><a href="#其他常用功能" class="headerlink" title="其他常用功能"></a>其他常用功能</h2><ul><li><p>list_editable : 在列表页可以直接编辑的</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_editable = [&apos;degree&apos;,&apos;desc&apos;]</span><br></pre></td></tr></table></figure><p>  <img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901103014984.png" alt=""></p></li><li><p>自定义函数作为列显示</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model.py</span><br><span class="line">class Course(models.Model):</span><br><span class="line">def get_zj_nums(self):</span><br><span class="line">    #获取课程的章节数</span><br><span class="line">    return self.lesson_set.all().count()</span><br><span class="line">get_zj_nums.short_description = &apos;章节数&apos;   #在后台显示的名称</span><br><span class="line"></span><br><span class="line">adminx.py</span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display = [&apos;get_zj_nums&apos;]  #直接使用函数名作为字段显示</span><br></pre></td></tr></table></figure><p>  <img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901102952563.png" alt=""></p></li><li><p>显示自定义的html代码</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">model.py</span><br><span class="line">class Course(models.Model):</span><br><span class="line">def go_to(self):</span><br><span class="line">    from django.utils.safestring import mark_safe</span><br><span class="line">    #mark_safe后就不会转义</span><br><span class="line">    return mark_safe(&quot;&lt;a href=&apos;https://home.cnblogs.com/u/derek1184405959/&apos;&gt;跳转&lt;/a&gt;&quot;)</span><br><span class="line">go_to.short_description = &quot;跳转&quot;</span><br><span class="line"></span><br><span class="line">adminx.py</span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display = [&apos;go_to&apos;]</span><br></pre></td></tr></table></figure><p>  <img src="http://pe5izyf7a.bkt.clouddn.com/在线教育平台Mxonline-xadmin的使用/20180901103213542.png" alt=""></p></li><li><p>refresh定时刷新工具</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class CourseAdmin(object):</span><br><span class="line">    refresh_times = [3,5]           #自动刷新（里面是秒数）</span><br></pre></td></tr></table></figure></li><li><p>字段联动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class CourseAdmin(object):</span><br><span class="line">    def save_models(self):</span><br><span class="line">        # 在保存课程的时候统计课程机构的课程数</span><br><span class="line">        # obj实际是一个course对象</span><br><span class="line">        obj = self.new_obj</span><br><span class="line">        # 如果这里不保存，新增课程，统计的课程数会少一个</span><br><span class="line">        obj.save()</span><br><span class="line">        # 确定课程的课程机构存在。</span><br><span class="line">        if obj.course_org is not None:</span><br><span class="line">            #找到添加的课程的课程机构</span><br><span class="line">            course_org = obj.course_org</span><br><span class="line">            #课程机构的课程数量等于添加课程后的数量</span><br><span class="line">            course_org.course_nums = Course.objects.filter(course_org=course_org).count()</span><br><span class="line">            course_org.save()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;django自带了admin用于后台管理，但是在github上还有一个更好看、功能更强大的库来管理后台，叫xadmin，今天就来好好介绍一下xadmin的使用。&lt;/p&gt;
&lt;h1 id=&quot;xadmin的安装&quot;&gt;&lt;a href=&quot;#xadmin的安装&quot; 
      
    
    </summary>
    
    
      <category term="django项目" scheme="http://yoursite.com/tags/django%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Mxonline" scheme="http://yoursite.com/tags/Mxonline/"/>
    
      <category term="xadmin" scheme="http://yoursite.com/tags/xadmin/"/>
    
  </entry>
  
  <entry>
    <title>在线教育平台Mxonline-django基本设置和model设计</title>
    <link href="http://yoursite.com/2018/09/01/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0Mxonline-django%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE%E5%92%8Cmodel%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/09/01/在线教育平台Mxonline-django基本设置和model设计/</id>
    <published>2018-09-01T05:09:09.000Z</published>
    <updated>2018-09-01T13:44:50.730Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在学习了一段时间的django框架后，也做了几个较为完整的项目，现将整个的过程做个记录和整理，也算是进行一次章节和回顾吧。接下来几天将从项目工程创建到linux服务器部署中较为关键的点进行记录和总结。</p><h1 id="开发环境和开发平台"><a href="#开发环境和开发平台" class="headerlink" title="开发环境和开发平台"></a>开发环境和开发平台</h1><ul><li>win10</li><li>Pycharm</li><li>python3.6.2</li><li>django1.11.6</li></ul><h1 id="虚拟环境的安装与使用"><a href="#虚拟环境的安装与使用" class="headerlink" title="虚拟环境的安装与使用"></a>虚拟环境的安装与使用</h1><ul><li><strong>virtualenv</strong>的安装：在win下使用<code>pip install virtualenv</code>执行安装,安装成功后使用<code>pip list</code>可以查看到版本信息</li><li>在需要创建虚拟环境的目录下执行<code>virtualenv testvir</code>就可以创建一个虚拟环境.</li><li>cd 进入虚拟环境目录,通过dir查看该目录下文件,<code>cd Scripts</code>,执行<code>activate</code>可以激活虚拟环境,执行<code>deactivate.bat</code>可以退出虚拟环境</li><li><strong>virtualenvwrapper</strong>可以进行虚拟环境的管理</li><li>win下安装<code>pip install virtualenvwrapper-win</code>,安装成功后使用<code>mkvirtualenv testEve</code>创建虚拟环境,会提示创建的虚拟环境的位置</li><li>使用workon查看已经安装的虚拟环境,使用<code>workon testEve</code>,如果虚拟环境已经激活,在任何时候执行<code>deactivate.bat</code>就可以退出虚拟环境</li></ul><h1 id="新工程设置"><a href="#新工程设置" class="headerlink" title="新工程设置"></a>新工程设置</h1><p>&emsp;&emsp;工程目录下创建log(日志)、media(上传文件)、templates(模板文件)、static(静态文件)，并新建setting_dev.py用于存储密码等信息，如果将项目托管于github可以把该文件放到.gitignore.<br>&emsp;&emsp;在工程目录下新建apps用于存放所有app,此时导入需要<code>from apps.app1 import views</code>,可以apps右键Mark Directory As - Sources Root(全局搜索路径),然后就可以通过<code>from app1 import views</code>,但是Mark后Pycharm能识别,但是使用命令行无法识别,需要再在setting中添加:</p><blockquote><p>sys.path.inser(0,os.path.join(BASE_DIR,’apps’))                   </p></blockquote><h2 id="其他配置："><a href="#其他配置：" class="headerlink" title="其他配置："></a>其他配置：</h2><ul><li>数据库切换成mysql,安装mysqlclient连接myql,同时在setting_dev.py中配置数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;mxonline&apos;,        #数据库名字</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,            #账号</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;123456&apos;,      #密码</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,       #IP</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;,            #端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在setting.py配置上传文件和静态文件的路径:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    os.path.join(BASE_DIR,&apos;static&apos;),</span><br><span class="line">)</span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,&apos;media&apos;)</span><br></pre></td></tr></table></figure></li><li>在url中配置处理图片的视图函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls.static import static</span><br><span class="line">from django.conf import settings</span><br><span class="line">if settings.DEBUG:</span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure></li><li>修改语言和时区<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;zh_hans&apos;</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line">USE_I18N = True</span><br><span class="line">USE_L10N = True</span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure>&emsp;&emsp;根据项目要求,会有一个users、course、organization的app,同时针对用户的各种操作设计operation的app<blockquote><p>python manage.py startapp users<br>python manage.py startapp course<br>python manage.py startapp organization<br>python manage.py startapp operation</p></blockquote></li></ul><h1 id="model设计"><a href="#model设计" class="headerlink" title="model设计"></a>model设计</h1><p>&emsp;&emsp;在model设计之前一定要梳理每一个model需要哪些字段,这是一个项目的关键.<br><img src="http://pe5izyf7a.bkt.clouddn.com/Django+xadmin%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0-django%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE%E5%92%8Cmodel%E8%AE%BE%E8%AE%A1/20180901034210471.png" alt=""></p><h2 id="用户表的设计"><a href="#用户表的设计" class="headerlink" title="用户表的设计"></a>用户表的设计</h2><ul><li>首先设计user表,如果django原有的user表不满足项目需求可以重新设计user表</li><li>已有字段:<blockquote><p>id: 主键<br>password 密码<br>last_login Django自动记录用户最后登录时间<br>is_superuser 表明用户是否是超级用户(后台管理会用到)<br>username 用户名字段不要随便改动<br>email 邮箱<br>is_staff 表示是否是员工(后台管理会用到)<br>is_active 用户是否是激活状态<br>date_joined 注册时间</p></blockquote></li><li>自定义user表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (&apos;male&apos;,&apos;男&apos;),</span><br><span class="line">        (&apos;female&apos;,&apos;女&apos;)</span><br><span class="line">    )</span><br><span class="line">    nick_name = models.CharField(&apos;昵称&apos;,max_length=50,default=&apos;&apos;)</span><br><span class="line">    birthday = models.DateField(&apos;生日&apos;,null=True,blank=True)</span><br><span class="line">    gender = models.CharField(&apos;性别&apos;,max_length=10,choices=gender_choices,default=&apos;female&apos;)</span><br><span class="line">    adress = models.CharField(&apos;地址&apos;,max_length=100,default=&apos;&apos;)</span><br><span class="line">    mobile = models.CharField(&apos;手机号&apos;,max_length=11,null=True,blank=True)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;image/%Y%m&apos;,default=&apos;image/default.png&apos;,max_length=100)</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户信息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li><li><p>然后再setting.py中修改:</p><blockquote><p>AUTH_USER_MODEL = ‘users.UserProfile’</p></blockquote></li><li><p>执行makemigrations和migrate生成数据表:</p><blockquote><p>python manage.py makemigrations<br>python manage.py migrate</p></blockquote></li><li><p>特别要注意图片和文件model需要指出上传地址upload_to</p><blockquote><p>image = models.ImageField(‘轮播图’,upload_to=’banner/%Y%m’,max_length=100)<br>download = models.FileField(“资源文件”,upload_to=”course/resource/%Y/%m”,max_length=100)</p></blockquote></li><li><p>图片上传需要安装第三方库</p><blockquote><p>pip install pillow</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在学习了一段时间的django框架后，也做了几个较为完整的项目，现将整个的过程做个记录和整理，也算是进行一次章节和回顾吧。接下来几天将从项目工程创建到linux服务器部署中较为关键的点进行记录和总结。&lt;/p&gt;
&lt;h1 id=&quot;开发环境和开发平台&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="django项目" scheme="http://yoursite.com/tags/django%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Mxonline" scheme="http://yoursite.com/tags/Mxonline/"/>
    
  </entry>
  
  <entry>
    <title>常用Markdown语法说明</title>
    <link href="http://yoursite.com/2018/08/30/%E5%B8%B8%E7%94%A8Markdown%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/08/30/常用Markdown语法说明/</id>
    <published>2018-08-30T13:10:19.000Z</published>
    <updated>2018-08-31T02:45:08.380Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式”编写文档，本文主要针对Hexo中Markdown常用的语法进行总结，更详细的内容请参考Hexo官方书写格式<a href="https://hexo.io/zh-cn/docs/tag-plugins#Image" target="_blank" rel="noopener">链接</a>和Markdown书写格式<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">链接</a></p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>Markdown支持两种标题的语法，Setext和atx形式：Setext形式是用底线的形式，利用 = (最高阶标题)和 - (第二阶标题)。Atx形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。<br><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180830101415216.png" alt=""></p><h1 id="最高阶标题"><a href="#最高阶标题" class="headerlink" title="最高阶标题"></a>最高阶标题</h1><h2 id="第二阶标题"><a href="#第二阶标题" class="headerlink" title="第二阶标题"></a>第二阶标题</h2><h1 id="H1标题"><a href="#H1标题" class="headerlink" title="H1标题"></a>H1标题</h1><h2 id="H2标题"><a href="#H2标题" class="headerlink" title="H2标题"></a>H2标题</h2><h3 id="H3标题"><a href="#H3标题" class="headerlink" title="H3标题"></a>H3标题</h3><h4 id="H4标题"><a href="#H4标题" class="headerlink" title="H4标题"></a>H4标题</h4><h5 id="H5标题"><a href="#H5标题" class="headerlink" title="H5标题"></a>H5标题</h5><h6 id="H6标题"><a href="#H6标题" class="headerlink" title="H6标题"></a>H6标题</h6><h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>区块引用则使用 email 形式的 ‘&gt;’ 角括号。<br><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180830101428434.png" alt=""></p><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote><h1 id="修辞和强调"><a href="#修辞和强调" class="headerlink" title="修辞和强调"></a>修辞和强调</h1><p>强调内容两侧分别加上星号或者底线。<br><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831094029082.png" alt=""><br><em>斜体</em><br><strong>粗体</strong><br><del>删除</del></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><ul><li>至少一个-</li><li>使用:来设置对其方式</li></ul><p><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831094343570.png" alt=""></p><table><thead><tr><th style="text-align:left">第一列</th><th style="text-align:right">第二列</th><th style="text-align:center">第三列</th></tr></thead><tbody><tr><td style="text-align:left">内容</td><td style="text-align:right">内容</td><td style="text-align:center">内容</td></tr></tbody></table><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用星号、加号或减号来做为列表。<br><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180830101500576.png" alt=""></p><ul><li>一号</li><li>二号</li></ul><ul><li>三号</li><li>四号</li></ul><ul><li>五号</li><li>六号</li></ul><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180830101514715.png" alt=""></p><ol><li>一号</li><li>二号</li></ol><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831094437848.png" alt=""><br>这是我的<a href="http://blog.rearib.top" target="_blank" rel="noopener">博客</a>地址</p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831101823686.png" alt=""></p><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片的语法和链接很像，只需在链接的基础上前方加一个！<br>注意图片大小的设置方式,关于其他设置可以参考<a href="https://developer.qiniu.com/dora/manual/3683/img-directions-for-use" target="_blank" rel="noopener">七牛云</a><br><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831101811191.png" alt=""><br><img src="http://pe5izyf7a.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180706201017_eviCsbl.jpg?imageView2/1/w/200/h/200/" alt="我的头像"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831101753642.png" alt=""><br><figure class="highlight objc"><figcaption><span>main.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>; i = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">      printf(<span class="string">"hello markdown!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h1><p><img src="http://pe5izyf7a.bkt.clouddn.com/常用Markdown语法说明/20180831103438948.png" alt=""></p><ul><li style="list-style: none"><input type="checkbox" checked> 选项一</li><li style="list-style: none"><input type="checkbox"> 选项二  </li><li style="list-style: none"><input type="checkbox"> 选项三</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式”编写文档，本文主要针对Hexo中Markdown常用的语法进行总结，更详细的内容请参考Hexo官方书写格式&lt;a href=&quot;https://hexo.io/zh-cn/docs/tag-plugi
      
    
    </summary>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rearib的个人博客</title>
  
  <subtitle>一生温暖纯良，不舍爱与自由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-07T06:21:11.669Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rearib</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DRF-什么是RESTful API</title>
    <link href="http://yoursite.com/2018/11/29/DRF-%E4%BB%80%E4%B9%88%E6%98%AFRESTful%20API/"/>
    <id>http://yoursite.com/2018/11/29/DRF-什么是RESTful API/</id>
    <published>2018-11-29T04:03:44.000Z</published>
    <updated>2018-12-07T06:21:11.669Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;关于RESTful架构的理解,先去看看阮一峰的两篇博客:</p><ul><li><a href="https://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li><li><a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a><a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;关于RESTful架构的理解,先去看看阮一峰的两篇博客:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2011/09/restful.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解RESTful架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RESTful API 设计指南&lt;/a&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="DRF" scheme="http://yoursite.com/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>DRF-Mixins介绍</title>
    <link href="http://yoursite.com/2018/11/11/DRF-Mixins%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/11/11/DRF-Mixins介绍/</id>
    <published>2018-11-11T04:03:44.000Z</published>
    <updated>2018-12-07T06:21:15.055Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在from rest_framework import viewsets这个viewset中，只要有5类Minxin:<br><img src="http://qiniu.rearib.top/20181819/2128-6.png" alt=""><br>看一下CreateModelMixin的源码:</p><p><img src="http://qiniu.rearib.top/20181819/2128-0.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在from rest_framework import viewsets这个viewset中，只要有5类Minxin:&lt;br&gt;&lt;img src=&quot;http://qiniu.rearib.top/20181819/2128-6.png&quot; alt=&quot;&quot;&gt;
      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="DRF" scheme="http://yoursite.com/tags/DRF/"/>
    
  </entry>
  
  <entry>
    <title>web-前端开发html</title>
    <link href="http://yoursite.com/2018/11/01/web-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8BHTML/"/>
    <id>http://yoursite.com/2018/11/01/web-前端开发之HTML/</id>
    <published>2018-11-01T07:47:08.000Z</published>
    <updated>2018-11-01T07:24:24.779Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;HTML是英文Hyper Text Mark-up Language(超文本标记语言)的缩写，是一种制作万维网页面标准语言（标记）。<strong>通俗的讲就是相当于定义统一的一套规则</strong>，大家都来遵守他，这样就可以让浏览器根据标记语言的规则去解释它。浏览器负责将标签翻译成用户“看得懂”的格式，呈现给用户！<br><a id="more"></a></p><h2 id="简单HTML实例"><a href="#简单HTML实例" class="headerlink" title="简单HTML实例"></a>简单HTML实例</h2><p><img src="http://qiniu.rearib.top/20181801/1523-G.png" alt=""></p><p>4、编写Html文件</p><pre><code>- doctype对应关系- html标签，标签内部可以写属性 ====&gt; 只能有一个- 注释：  &lt;!--  注释的内容  --&gt;</code></pre><p>5、标签分类</p><pre><code>- 自闭合标签    &lt;meta charset=&quot;UTF-8&quot;&gt;- 主动闭合标签    &lt;title&gt;老男孩&lt;/title&gt;</code></pre><p>6、head标签</p><pre><code>- &lt;meta  -&gt; 编码，跳转，刷新，关键字，描述，IE兼容        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=IE9;IE=IE8;&quot; /&gt;- title标签- &lt;link /&gt;     定义文档与外部资源的关系- &lt;style /&gt;    定义HTML文档样式信息- &lt;script&gt;     定义客户端脚本，比如 JavaScript</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;HTML是英文Hyper Text Mark-up Language(超文本标记语言)的缩写，是一种制作万维网页面标准语言（标记）。&lt;strong&gt;通俗的讲就是相当于定义统一的一套规则&lt;/strong&gt;，大家都来遵守他，这样就可以让浏览器根据标记语言的规则去解释它。浏览器负责将标签翻译成用户“看得懂”的格式，呈现给用户！&lt;br&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>python-RabbitMQ 安装、基本示例、轮询机制</title>
    <link href="http://yoursite.com/2018/10/31/python-RabbitMQ%20%E5%AE%89%E8%A3%85%E3%80%81%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B%E3%80%81%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/10/31/python-RabbitMQ 安装、基本示例、轮询机制/</id>
    <published>2018-10-31T09:03:44.000Z</published>
    <updated>2018-10-31T01:17:06.697Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;MQ全称为Message Queue, 是一种分布式应用程序的的通信方法，它是<strong>消费-生产者模型的一个典型的代表</strong>，producer往消息队列中不断写入消息，而另一端consumer则可以读取或者订阅队列中的消息。RabbitMQ是MQ产品的典型代表，是一款基于AMQP协议可复用的企业消息系统。业务上，可以实现服务提供者和消费者之间的数据解耦，提供高可用性的消息传输机制，在实际生产中应用相当广泛。本文意在介绍Rabbitmq的基本原理，以及在python下的各种应用。<br><a id="more"></a></p><h2 id="python中的queue概念："><a href="#python中的queue概念：" class="headerlink" title="python中的queue概念："></a>python中的queue概念：</h2><ul><li>线程queue：只是用于多个线程之间，进行数据同步交互的。</li><li>进程queue：只是用户父进程与子进程进行交互，或者属于同一父进程下的多个子进程进行交互。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;MQ全称为Message Queue, 是一种分布式应用程序的的通信方法，它是&lt;strong&gt;消费-生产者模型的一个典型的代表&lt;/strong&gt;，producer往消息队列中不断写入消息，而另一端consumer则可以读取或者订阅队列中的消息。RabbitMQ是MQ产品的典型代表，是一款基于AMQP协议可复用的企业消息系统。业务上，可以实现服务提供者和消费者之间的数据解耦，提供高可用性的消息传输机制，在实际生产中应用相当广泛。本文意在介绍Rabbitmq的基本原理，以及在python下的各种应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>工具-ShareX+七牛云实现私有图床</title>
    <link href="http://yoursite.com/2018/10/29/%E5%B7%A5%E5%85%B7-ShareX+%E4%B8%83%E7%89%9B%E4%BA%91%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89%E5%9B%BE%E5%BA%8A/"/>
    <id>http://yoursite.com/2018/10/29/工具-ShareX+七牛云实现私有图床/</id>
    <published>2018-10-29T01:33:42.000Z</published>
    <updated>2018-10-29T08:53:51.414Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;所谓图床，就是专门用来存放图片，同时允许你把图片对外连接的网上空间，通过访问链接就能直接查看或者分享图片，特别是个人博客的图片存储需要一个方便高效的私有图床，今天介绍一个通过ShareX+七牛云实现私有图床的方法。<br><a id="more"></a></p><h2 id="什么是七牛云"><a href="#什么是七牛云" class="headerlink" title="什么是七牛云"></a>什么是七牛云</h2><p>&emsp;&emsp;七牛云是国内一家领先的云存储公司，可以利用七牛云存储对象存储图片并生成外链。官网<a href="http://www.qiniu.com/" target="_blank" rel="noopener">地址</a>，注册后会赠送10G的免费空间.</p><h2 id="什么是ShareX"><a href="#什么是ShareX" class="headerlink" title="什么是ShareX"></a>什么是ShareX</h2><p>&emsp;&emsp;截图，这种再寻常不过的事情。有着很多的软件供我们选择，从常用的QQ到使用Snipaste。不光截图的方式多种多样，从处理截图，到上传截图到网络，都有软件能为你服务。但是，从截图，到处理截图，再到上传截图，至少需要用到两个软件。但是一个ShareX就能全部搞定。</p><h2 id="用ShareX-qiniu一键截图上传配置"><a href="#用ShareX-qiniu一键截图上传配置" class="headerlink" title="用ShareX+qiniu一键截图上传配置"></a>用ShareX+qiniu一键截图上传配置</h2><h3 id="1-sharex下载"><a href="#1-sharex下载" class="headerlink" title="1. sharex下载"></a>1. <a href="https://getsharex.com/" target="_blank" rel="noopener">sharex</a>下载</h3><p>&emsp;&emsp;安装后打开如图<br><img src="http://qiniu.rearib.top/20181829/1616-F.png" alt=""></p><h3 id="2-设置图片上传"><a href="#2-设置图片上传" class="headerlink" title="2. 设置图片上传"></a>2. 设置图片上传</h3><p>&emsp;&emsp;打开 shareX -&gt; 目的地 -&gt; 目的地设置 -&gt; 自定义上传（最底下）</p><p><img src="http://qiniu.rearib.top/20181829/1619-B.png" alt=""></p><ul><li>上传者：填入 qiniu，点击添加</li><li>请求 URL：进入自己的「对象存储」-&gt; 空间设置 -&gt; 存储区域，查看自己所在地区。根据 <a href="https://developer.qiniu.com/kodo/manual/1671/region-endpoint" target="_blank" rel="noopener">存储区域 - 七牛开发者中心</a> 选择自己的地址，我是华东，填入 up.qiniup.com</li><li>URL（右侧靠下）:自己的外链默认域名 + $json:key$ -&gt; xxxxx.bkt.clouddn.com/$json:key$</li><li><strong>上图中我的默认域名修改成了自己的默认域名qiniu.rearib.top</strong></li></ul><h3 id="3-重点：生成-token"><a href="#3-重点：生成-token" class="headerlink" title="3. 重点：生成 token"></a><font color="red">3. 重点：生成 token</font></h3><p>下载生成<a href="http://moi.oss-cn-hangzhou.aliyuncs.com/qiniutoken-windows.7z" target="_blank" rel="noopener">工具</a><br>下载生成工具后执行：</p><blockquote><p>qiniutoken.exe -ak=[AccessKey] -sk=[SecretKey] -bk=[bucket]</p></blockquote><p>AccessKey和SecretKey登录七牛云-个人面板-秘钥管理-AK|SK</p><p>bucket是存储空间名字</p><p><strong>参数</strong></p><p>&emsp;&emsp;在「参数」下有两个输入空框</p><table><thead><tr><th>左框</th><th>右框</th></tr></thead><tbody><tr><td>token</td><td>上部生成的 token</td></tr><tr><td>key</td><td>%yy%d%h%mi%s.png</td></tr><tr><td>file</td><td>$input$</td></tr></tbody></table><ul><li>key 为上传时用的文件名，%yy%d%h%mi%s.png 是指年月日小时分钟秒，如 20180213165812.png</li></ul><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><p>&emsp;&emsp;都配置完后，点击左侧「图片上传」-「测试」，若测试结果返回一个正常的连接地址那就是配置成功了。<br><img src="http://qiniu.rearib.top/20181829/1644-W.png" alt=""><br>&emsp;&emsp;设置上传地址：sharex -&gt; 目的地 -&gt; 图片上传 -&gt; 自定义图像上传</p><p>&emsp;&emsp;截图后的动作 -&gt; 上传图片</p><p>按下快捷键截图后会自动上传并把七牛云返回的外链放到剪切板，成功后会有提示音并显示状态.<br><img src="http://qiniu.rearib.top/20181829/1648-M.png" alt=""><br>打开浏览器粘贴<br><img src="http://qiniu.rearib.top/20181829/1650-k.png" alt=""></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>1、<a href="http://du.zoomquiet.io/2018-02/sharex-qiniu/" target="_blank" rel="noopener">用 ShareX qiniu 一键截图上传</a></p><p>2、<a href="https://ystyle.top/2017/07/05/share-the-use-of-qiniu-file-upload/" target="_blank" rel="noopener">ShareX使用七牛文件上传</a></p><p>3、<a href="http://www.majianwei.com/archives/6660" target="_blank" rel="noopener">ShaseX</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;所谓图床，就是专门用来存放图片，同时允许你把图片对外连接的网上空间，通过访问链接就能直接查看或者分享图片，特别是个人博客的图片存储需要一个方便高效的私有图床，今天介绍一个通过ShareX+七牛云实现私有图床的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>python-事件驱动和IO介绍</title>
    <link href="http://yoursite.com/2018/10/29/python-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%92%8CIO%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/10/29/python-事件驱动和IO介绍/</id>
    <published>2018-10-29T01:33:42.000Z</published>
    <updated>2018-10-30T01:16:41.579Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;通常，我们写服务器处理模型的程序时，有以下几种模型：</p><ol><li>每收到一个请求，创建一个新的进程，来处理该请求；</li><li>每收到一个请求，创建一个新的线程，来处理该请求；</li><li>每收到一个请求，放入一个事件列表，让主进程通过非阻塞I/O方式来处理请求<a id="more"></a>&emsp;&emsp;上面的几种方式，各有千秋：</li></ol><ul><li>第1中方法，由于创建新的进程的开销比较大，所以，会导致服务器性能比较差,但实现比较简单。</li><li>第2种方式，由于要涉及到线程的同步，有可能会面临死锁等问题。</li><li>第3种方式，在写应用程序代码时，逻辑比前面两种都复杂。<br>&emsp;&emsp;综合考虑各方面因素，一般普遍认为第（3）种方式是大多数网络服务器采用的方式<h2 id="事件驱动模型"><a href="#事件驱动模型" class="headerlink" title="事件驱动模型"></a>事件驱动模型</h2>&emsp;&emsp;在UI编程中，常常要对鼠标点击进行相应，首先如何获得鼠标点击呢？</li></ul><blockquote><p>方式一：创建一个线程，该线程一直循环检测是否有鼠标点击，那么这个方式有以下几个缺点：</p></blockquote><ol><li>CPU资源浪费，可能鼠标点击的频率非常小，但是扫描线程还是会一直循环检测，这会造成很多的CPU资源浪费；如果扫描鼠标点击的接口是阻塞的呢？</li><li>如果是堵塞的，又会出现下面这样的问题，如果我们不但要扫描鼠标点击，还要扫描键盘是否按下，由于扫描鼠标时被堵塞了，那么可能永远不会去扫描键盘；</li><li>如果一个循环需要扫描的设备非常多，这又会引来响应时间的问题；<br>所以，该方式是非常不好的。</li></ol><blockquote><p>方式二：就是事件驱动模型,目前大部分的UI编程都是事件驱动模型，如很多UI平台都会提供onClick()事件，这个事件就代表鼠标按下事件。事件驱动模型大体思路如下：</p></blockquote><ol><li>有一个事件（消息）队列；</li><li>鼠标按下时，往这个队列中增加一个点击事件（消息）；</li><li>有个循环，不断从队列取出事件，根据不同的事件，调用不同的函数，如onClick()、onKeyDown()等；</li><li>事件（消息）一般都各自保存各自的处理函数指针，这样，每个消息都有独立的处理函数；<br><img src="http://qiniu.rearib.top/20181829/2317-9.png" alt=""></li></ol><p>&emsp;&emsp;事件驱动编程是一种编程范式，这里程序的执行流由外部事件来决定。它的特点是包含一个事件循环，当外部事件发生时使用回调机制来触发相应的处理。另外两种常见的编程范式是（单线程）同步以及多线程编程。</p><p>&emsp;&emsp;让我们用例子来比较和对比一下<strong>单线程、多线程以及事件驱动编程模型</strong>。下图展示了随着时间的推移，这三种模式下程序所做的工作。这个程序有3个任务需要完成，每个任务都在等待I/O操作时阻塞自身。阻塞在I/O操作上所花费的时间已经用灰色框标示出来了。</p><p><img src="http://qiniu.rearib.top/20181829/2320-H.png" alt=""></p><p>&emsp;&emsp;在单线程同步模型中，任务按照顺序执行。<strong>如果某个任务因为I/O而阻塞，其他所有的任务都必须等待，直到它完成之后它们才能依次执行</strong>。这种明确的执行顺序和串行化处理的行为是很容易推断得出的。如果任务之间并没有互相依赖的关系，但仍然需要互相等待的话这就使得程序不必要的降低了运行速度。</p><p>&emsp;&emsp;在多线程版本中，这3个任务分别在独立的线程中执行。这些线程由操作系统来管理，在多处理器系统上可以并行处理，或者在单处理器系统上交错执行。这使得当某个线程阻塞在某个资源的同时其他线程得以继续执行。与完成类似功能的同步程序相比，这种方式更有效率，<strong>但程序员必须写代码来保护共享资源，防止其被多个线程同时访问。</strong>多线程程序更加难以推断，因为这类程序不得不通过线程同步机制如锁、可重入函数、线程局部存储或者其他机制来处理线程安全问题，如果实现不当就会导致出现微妙且令人痛不欲生的bug。</p><p>&emsp;&emsp;在事件驱动版本的程序中，3个任务交错执行，但仍然在一个单独的线程控制中。当处理I/O或者其他昂贵的操作时，注册一个回调到事件循环中，然后当I/O操作完成时继续执行。回调描述了该如何处理某个事件。事件循环轮询所有的事件，当事件到来时将它们分配给等待处理事件的回调函数。这种方式让程序尽可能的得以执行而不需要用到额外的线程。事件驱动型程序比多线程程序更容易推断出行为，因为程序员不需要关心线程安全问题。</p><p>&emsp;&emsp;当我们面对如下的环境时，事件驱动模型通常是一个好的选择：</p><ul><li>程序中有许多任务，而且任务之间高度独立（因此它们不需要互相通信，或者等待彼此）,而且在等待事件到来时，某些任务会阻塞。</li><li>当应用程序需要在任务间共享可变的数据时，这也是一个不错的选择，因为这里不需要采用同步处理。</li></ul><blockquote><p><strong>网络应用程序通常都有上述这些特点，这使得它们能够很好的契合事件驱动编程模型。</strong></p></blockquote><p>&emsp;&emsp;上面的事件驱动模型中，只要一遇到IO就注册一个事件，然后主程序就可以继续干其它的事情了，只到io处理完毕后，继续恢复之前中断的任务，这本质上是怎么实现的呢？<br><img src="http://qiniu.rearib.top/20181829/2326-A.png" alt=""></p><h2 id="阻塞IO-非阻塞IO-同步IO-异步IO介绍"><a href="#阻塞IO-非阻塞IO-同步IO-异步IO介绍" class="headerlink" title="阻塞IO,非阻塞IO,同步IO,异步IO介绍"></a>阻塞IO,非阻塞IO,同步IO,异步IO介绍</h2><p>&emsp;&emsp;对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p><ol><li>等待数据准备 (Waiting for the data to be ready)</li><li>将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</li></ol><p>&emsp;&emsp;正式因为这两个阶段，linux系统产生了下面五种网络模式的方案。</p><ul><li>阻塞 I/O（blocking IO）</li><li>非阻塞 I/O（nonblocking IO）</li><li>I/O 多路复用（ IO multiplexing）</li><li>信号驱动 I/O（ signal driven IO）</li><li>异步 I/O（asynchronous IO）</li></ul><p><strong>注：由于signal driven IO在实际中并不常用，所以只提及剩下的四种IO Model。</strong></p><h3 id="1、概念说明"><a href="#1、概念说明" class="headerlink" title="1、概念说明"></a>1、概念说明</h3><blockquote><p>1.1、用户空间与内核空间</p></blockquote><p>&emsp;&emsp;现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。<strong>操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。</strong>为了保证用户进程不能直接操作内核（kernel），保证内核的安全，<strong>操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。</strong>针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><blockquote><p>1.2、进程切换</p></blockquote><p>&emsp;&emsp;为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</p><p>&emsp;&emsp;从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><ol><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。</li><li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。</li></ol><p>&emsp;&emsp;总而言之就是很耗资源，具体的可以参考这篇文章：<a href="http://guojing.me/linux-kernel-architecture/posts/process-switch/" target="_blank" rel="noopener">进程切换</a></p><p>&emsp;&emsp;注：进程控制块（Processing Control Block），是操作系统核心中一种数据结构，主要表示进程状态。其作用是使一个在多道程序环境下不能独立运行的程序（含数据），成为一个能独立运行的基本单位或与其它进程并发执行的进程。或者说，OS是根据PCB来对并发执行的进程进行控制和管理的。 PCB通常是系统内存占用区中的一个连续存区，它存放着操作系统用于描述进程情况及控制进程运行所需的全部信息</p><blockquote><p>1.3、进程阻塞</p></blockquote><p>&emsp;&emsp;正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。当进程进入阻塞状态，是不占用CPU资源的。</p><blockquote><p>1.4、文件描述符fd</p></blockquote><p>&emsp;&emsp;文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p><p>&emsp;&emsp;文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p><blockquote><p>1.5、缓存I/O</p></blockquote><p>&emsp;&emsp;缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><p>&emsp;&emsp;缓存 I/O 的缺点：数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><h3 id="五种IO网络模式"><a href="#五种IO网络模式" class="headerlink" title="五种IO网络模式"></a>五种IO网络模式</h3><blockquote><p>阻塞 I/O（blocking IO）</p></blockquote><p>&emsp;&emsp;在linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：<br><img src="http://qiniu.rearib.top/20181829/2336-5.png" alt=""><br>&emsp;&emsp;当用户进程调用了recvfrom这个系统调用，kernel（内核）就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进程自己选择的阻塞）。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。</p><p><strong>所以，blocking IO的特点就是在IO执行的两个阶段都被block了。</strong></p><blockquote><p>非阻塞 I/O（nonblocking IO）</p></blockquote><p>&emsp;&emsp;linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子：<br><img src="http://qiniu.rearib.top/20181829/2338-s.png" alt=""></p><p> &emsp;&emsp;当用户进程发出read操作时，如果kernel（内核）中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p><p><strong>所以，nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。</strong></p><blockquote><p>I/O 多路复用（ IO multiplexing）</p></blockquote><p> &emsp;&emsp;IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。<br><img src="http://qiniu.rearib.top/20181829/2342-E.png" alt=""></p><p>&emsp;&emsp;当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel（内核）拷贝到用户进程。</p><p>&emsp;&emsp;这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><p>&emsp;&emsp;所以，如果处理的连接数不是很高的话，使用select/epoll的web server不一定比使用multi-threading + blocking IO的web server性能更好，可能延迟还更大。select/epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。）</p><p>&emsp;&emsp;在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><p><strong>所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</strong></p><blockquote><p>异步 I/O（asynchronous IO）</p></blockquote><p>&emsp;&emsp;Linux下的asynchronous IO其实用得很少。先看一下它的流程：<br><img src="http://qiniu.rearib.top/20181829/2345-B.png" alt=""><br>&emsp;&emsp;用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel（内核）会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote><p>blocking和non-blocking的区别</p></blockquote><p>&emsp;&emsp;调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel（内核）还准备数据的情况下会立刻返回。</p><blockquote><p>synchronous IO和asynchronous IO的区别</p></blockquote><p>&emsp;&emsp;两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。</p><p>&emsp;&emsp;有人会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。</p><p>&emsp;&emsp;而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。</p><p><strong>各个IO Model的比较如图所示：</strong><br><img src="http://qiniu.rearib.top/20181829/2348-D.png" alt=""></p><h2 id="IO多路复用（select、poll、epoll）介绍及select、epoll的实现"><a href="#IO多路复用（select、poll、epoll）介绍及select、epoll的实现" class="headerlink" title="IO多路复用（select、poll、epoll）介绍及select、epoll的实现"></a>IO多路复用（select、poll、epoll）介绍及select、epoll的实现</h2><p>&emsp;&emsp;IO多路复用中包括 select、pool、epoll，这些都属于同步，还不属于异步</p><h3 id="1、select"><a href="#1、select" class="headerlink" title="1、select"></a>1、select</h3><p>&emsp;&emsp;select最早于1983年出现在4.2BSD中，它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。</p><p>&emsp;&emsp;select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点，事实上从现在看来，这也是它所剩不多的优点之一。</p><p>&emsp;&emsp;select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，不过可以通过修改宏定义甚至重新编译内核的方式提升这一限制。</p><p>&emsp;&emsp;另外，select()所维护的存储大量文件描述符的数据结构，随着文件描述符数量的增大，其复制的开销也线性增长。同时，由于网络响应时间的延迟使得大量TCP连接处于非活跃状态，但调用select()会对所有socket进行一次线性扫描，所以这也浪费了一定的开销。</p><h3 id="2、poll"><a href="#2、poll" class="headerlink" title="2、poll"></a>2、poll</h3><p>&emsp;&emsp;poll在1986年诞生于System V Release 3，它和select在本质上没有多大差别，但是poll没有最大文件描述符数量的限制。</p><p>&emsp;&emsp;poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p><p>&emsp;&emsp;另外，select()和poll()将就绪的文件描述符告诉进程后，如果进程没有对其进行IO操作，那么下次调用select()和poll()的时候将再次报告这些文件描述符，所以它们一般不会丢失就绪的消息，这种方式称为水平触发（Level Triggered）。</p><h3 id="3、epoll"><a href="#3、epoll" class="headerlink" title="3、epoll"></a>3、epoll</h3><p>&emsp;&emsp;直到Linux2.6才出现了由内核直接支持的实现方法，那就是epoll，它几乎具备了之前所说的一切优点，被公认为Linux2.6下性能最好的多路I/O就绪通知方法。</p><p>&emsp;&emsp;epoll可以同时支持水平触发和边缘触发（Edge Triggered，只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂。</p><p>&emsp;&emsp;epoll同样只告知那些就绪的文件描述符，而且当我们调用epoll_wait()获得就绪文件描述符时，返回的不是实际的描述符，而是一个代表就绪描述符数量的值，你只需要去epoll指定的一个数组中依次取得相应数量的文件描述符即可，这里也使用了内存映射（mmap）技术，这样便彻底省掉了这些文件描述符在系统调用时复制的开销。</p><p>&emsp;&emsp;另一个本质的改进在于epoll采用基于事件的就绪通知方式。在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。<br><img src="http://qiniu.rearib.top/20181829/2352-b.png" alt=""></p><h3 id="select-IO多路复用"><a href="#select-IO多路复用" class="headerlink" title="select IO多路复用"></a>select IO多路复用</h3><p>&emsp;&emsp;Python的select()方法直接调用操作系统的IO接口，它监控sockets,open files, and pipes(所有带fileno()方法的文件句柄)何时变成readable 和writeable, 或者通信错误，select()使得同时监控多个连接变的简单，并且这比写一个长循环来等待和监控多客户端连接要高效，因为select直接通过操作系统提供的C的网络接口进行操作，而不是通过Python的解释器。</p><p>&emsp;&emsp;select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样会造成效率的降低</p><p><a href="https://www.cnblogs.com/Keep-Ambition/p/7598740.html" target="_blank" rel="noopener">继续看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;通常，我们写服务器处理模型的程序时，有以下几种模型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每收到一个请求，创建一个新的进程，来处理该请求；&lt;/li&gt;
&lt;li&gt;每收到一个请求，创建一个新的线程，来处理该请求；&lt;/li&gt;
&lt;li&gt;每收到一个请求，放入一个事件列表，让主进程通过非阻塞I/O方式来处理请求
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-协程</title>
    <link href="http://yoursite.com/2018/10/29/python-%E5%8D%8F%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/29/python-协程/</id>
    <published>2018-10-29T01:33:42.000Z</published>
    <updated>2018-10-29T06:55:22.731Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;协程，又称微线程。英文名Coroutine。一句话说明什么是协程：协程是一种用户态的轻量级线程。<br>&emsp;&emsp;协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此：<br>&emsp;&emsp;协程能保留上一次调用时的状态（即所有局部状态的一个特定组合），每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处逻辑流的位置。<br><a id="more"></a></p><h2 id="协程的好处："><a href="#协程的好处：" class="headerlink" title="协程的好处："></a>协程的好处：</h2><ul><li>无需线程上下文切换的开销</li><li>无需原子操作锁定及同步的开销(协程是单线程,串行)</li><li>“原子操作(atomic operation)是不需要synchronized”，所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。原子操作可以是一个步骤，也可以是多个操作步骤，但是其顺序是不可以被打乱，或者切割掉只执行部分。视作整体是原子性的核心。</li><li>方便切换控制流，简化编程模型</li><li>高并发+高扩展性+低成本：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理。</li></ul><h2 id="协程的缺点："><a href="#协程的缺点：" class="headerlink" title="协程的缺点："></a>协程的缺点：</h2><ul><li>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</li><li><p>进行阻塞（Blocking）操作（如IO时）会阻塞掉整个程序。</p><h2 id="yield实现协程"><a href="#yield实现协程" class="headerlink" title="yield实现协程"></a>yield实现协程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def consumer(name):</span><br><span class="line">    print(&quot;---&gt;starting eating baozi...&quot;)</span><br><span class="line">    while True:</span><br><span class="line">        new_baozi = yield   # yield设置生成器</span><br><span class="line">        print(&quot;[&#123;0&#125;] is eating baozi &#123;1&#125;&quot;.format(name, new_baozi))</span><br><span class="line"> </span><br><span class="line">def producer():</span><br><span class="line">    r = con.__next__()  # 调用生成器开始执行</span><br><span class="line">    r = con2.__next__()</span><br><span class="line">    n = 0</span><br><span class="line">    while n &lt; 5:</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        print(&quot;producer is making baozi &#123;0&#125;&quot;.format(n))</span><br><span class="line">        con.send(n)  # 唤醒生成器，并且向生成器传值</span><br><span class="line">        con2.send(n)</span><br><span class="line">        n += 1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    con = consumer(&quot;c1&quot;)    # 创建一个生成器c1,但是不会开始执行</span><br><span class="line">    con2 = consumer(&quot;c2&quot;)   # 创建一个生产器C2,但是不会开始执行</span><br><span class="line">    p = producer()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/python-协程/20181029094850452.png" alt=""></p></li><li><p><strong>send有两个作用？</strong><br>1.唤醒生产器<br>2.给yield传一个值，就是yield接收到的这个值。这个说明yield在被唤醒的时候可以接收数据。</p></li><li><strong>怎么实现我们的单线程实现并发的效果呢？</strong><br>&emsp;&emsp;<font color="red">遇到IO操作就切换</font>，IO比较耗时，协程之所以能处理大并发，就是IO操作会挤掉大量的时间。<font color="red">没有IO操作的话，整个程序只有cpu在运算了</font>，因为cpu很快，所以你感觉是在并发执行的。</li><li><strong>IO操作完成了，程序什么时候切回去</strong>？<br>&emsp;&emsp;IO操作一旦完成，我们就自动切回去。</li><li><strong>IO是什么?</strong><br>&emsp;&emsp;Python中的io模块是用来处理各种类型的I/O操作流。主要有三种类型的I/O类型：文本I/O(Text I/O)，二进制I/O(Binary I/O)和原始I/O(Raw I/O)。它们都是通用类别，每一种都有不同的后备存储。属于这些类别中的任何一个的具体对象称为文件对象，其他常用的术语为流或者类文件对象。<br>&emsp;&emsp;除了它的类别，每一种具体的流对象也具有各种功能：它仅仅允许读，或者仅仅允许写，或者既能读又能写。它也允许任意随机访问（向前或者向后寻找任何位置），或者仅仅顺序访问（例如在套接字或管道中）。<br>&emsp;&emsp;所有的流对于提供给它们的数据的数据类型都很严格。例如，如果用一个二进制流的write（）方法写一个字符类型的数据，那么将会触发一个TypeError错误。用文本流的write()方法来写字节对象数据也是一样的，会触发该错误。<h2 id="手动实现切换IO"><a href="#手动实现切换IO" class="headerlink" title="手动实现切换IO"></a>手动实现切换IO</h2>&emsp;&emsp;Greenlet是python的一个C扩展，来源于Stackless python，旨在提供可自行调度的‘微线程’， 即协程。它可以使你在任意函数之间随意切换，而不需把这个函数先声明为generator<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from greenlet import greenlet</span><br><span class="line"> </span><br><span class="line">def test1():</span><br><span class="line">    print(12)</span><br><span class="line">    gr2.switch()  # 切换到test2</span><br><span class="line">    print(34)</span><br><span class="line">    gr2.switch()   # 切换到test2</span><br><span class="line"> </span><br><span class="line">def test2():</span><br><span class="line">    print(56)</span><br><span class="line">    gr1.switch()   # 切换到test1</span><br><span class="line">    print(78)</span><br><span class="line"> </span><br><span class="line">gr1 = greenlet(test1)  # 启动一个协程</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line">gr1.switch()   # 切换到test1，这个switch不写的话，会无法输出打印</span><br></pre></td></tr></table></figure><img src="http://qiniu.rearib.top/python-协程/20181029101816499.png" alt=""><br><strong>小结：</strong></li><li>cpu只认识线程，而不认识协程，协程是用户自己控制的，cpu根本都不知道它们的存在。</li><li>线程的上下文切换保存在cpu的寄存器中，但是协程拥有自己的寄存上下文和栈。</li><li>协程是串行的，无需锁。</li><li>虽然greenlet确实用着比generator（生成器）还简单了，但好像还没有解决一个问题，就是遇到IO操作，自动切换，对不对？<h2 id="协程遇IO操作自动切换"><a href="#协程遇IO操作自动切换" class="headerlink" title="协程遇IO操作自动切换"></a>协程遇IO操作自动切换</h2>&emsp;&emsp;接下来就说说如何遇到IO就自动切换切换，Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是Greenlet, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import gevent</span><br><span class="line"> </span><br><span class="line">def foo():</span><br><span class="line">    print(&quot;Running in foo&quot;)</span><br><span class="line">    gevent.sleep(3)  # 模仿io操作，一遇到io操作就切换</span><br><span class="line">    print(&quot;Explicit context switch to foo again&quot;)</span><br><span class="line"> </span><br><span class="line">def bar():</span><br><span class="line">    print(&quot;Explicit context to bar&quot;)</span><br><span class="line">    gevent.sleep(1)</span><br><span class="line">    print(&quot;Implicit context switch back to bar&quot;)</span><br><span class="line"> </span><br><span class="line">def fun3():</span><br><span class="line">    print(&quot;running fun3&quot;)</span><br><span class="line">    gevent.sleep(0)   # 虽然是0秒，但是会触发一次切换</span><br><span class="line">    print(&quot;running fun3 again&quot;)</span><br><span class="line"> </span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(foo),  # 生成协程</span><br><span class="line">    gevent.spawn(bar),</span><br><span class="line">    gevent.spawn(fun3)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><img src="http://qiniu.rearib.top/python-协程/20181029103346052.png" alt=""><br>&emsp;&emsp;当foo遇到sleep(3)的时候，切自动切换到bar函数，执行遇到sleep(1)的时候自动切换到fun3函数，遇到sleep(0)又自动切换到foo。这个时候sleep(3)还没有执行完毕，又切换到bar的sleep(1)这边，发现又没有执行完毕，就有执行fun3这边，发现sleep(0)执行完毕，则继续执行，然后又切换到foo,发现sleep(3)又没有执行完毕，就切换到bar的sleep(1)这边，发现执行完了，有切回到foo这边，执行完毕。<br>&emsp;&emsp;<strong>比如说你现在有50处IO，然后总共加起来串行的的话，要花100秒，但是50处IO最长的那个IO只花了5秒钟，那代表中你的这个程序就是协程最多5秒就执行完毕了。</strong></li></ul><p><strong>符合下面四个条件才能称之为协程：</strong></p><ul><li>必须在只有一个单线程里实现并发</li><li>修改共享数据不需加锁</li><li>用户程序里自己保存多个控制流的上下文栈</li><li>一个协程遇到IO操作自动切换到其它协程</li></ul><h2 id="协程（gevent）并发爬网页"><a href="#协程（gevent）并发爬网页" class="headerlink" title="协程（gevent）并发爬网页"></a>协程（gevent）并发爬网页</h2><p>&emsp;&emsp;上面例子gevent遇到io自动切换，现在就来实际演示协程爬虫的例子<br><strong>正常（串行）爬网页</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line">def run(url):</span><br><span class="line">    print(&quot;GET:&#123;0&#125;&quot;.format(url))</span><br><span class="line">    resp = request.urlopen(url)    # request.urlopen()函数 用来打开网页</span><br><span class="line">    data = resp.read()    # 读取爬到的数据</span><br><span class="line">    with open(&quot;url.html&quot;, &quot;wb&quot;) as f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    print(&apos;&#123;0&#125; bytes received from &#123;1&#125;&apos;.format(len(data), url))</span><br><span class="line"> </span><br><span class="line">urls = [</span><br><span class="line">    &apos;http://www.163.com/&apos;,</span><br><span class="line">    &apos;https://www.yahoo.com/&apos;,</span><br><span class="line">    &apos;https://github.com/&apos;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">time_start = time.time()    # 开始时间</span><br><span class="line">for url in urls:</span><br><span class="line">    run(url)</span><br><span class="line">print(&quot;同步cost&quot;, time.time() - time_start)  # 程序执行消耗的时间</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-协程/20181029020845792.png" alt=""></p><p><strong>协程(gevent)爬虫(gevent并发执行)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">import time,gevent</span><br><span class="line"> </span><br><span class="line">def run(url):</span><br><span class="line">    print(&quot;GET:&#123;0&#125;&quot;.format(url))</span><br><span class="line">    resp = request.urlopen(url)    # request.urlopen()函数 用来打开网页</span><br><span class="line">    data = resp.read()    # 读取爬到的数据</span><br><span class="line">    with open(&quot;url.html&quot;, &quot;wb&quot;) as f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    print(&apos;&#123;0&#125; bytes received from &#123;1&#125;&apos;.format(len(data), url))</span><br><span class="line"> </span><br><span class="line">urls = [</span><br><span class="line">    &apos;http://www.163.com/&apos;,</span><br><span class="line">    &apos;https://www.yahoo.com/&apos;,</span><br><span class="line">    &apos;https://github.com/&apos;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">time_start = time.time()    # 开始时间</span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(run,&apos;http://www.163.com/&apos;),  # 生成协程</span><br><span class="line">    gevent.spawn(run,&apos;https://www.yahoo.com/&apos;),</span><br><span class="line">    gevent.spawn(run,&apos;https://github.com/&apos;)</span><br><span class="line">])</span><br><span class="line">print(&quot;异步cost&quot;, time.time() - time_start)  # 程序执行消耗的时间</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-协程/20181029023531205.png" alt=""><br><strong>对比1、2爬网页的例子，发现执行耗费时间上并没有得到明显提升，并没有并发爬网页的神奇快感，其实主要是因为gevent现在检测不到urllib的IO操作。它都不知道urllib进行了IO操作，感受不到阻塞，它都不会进行切换，所以它就串行了。</strong></p><p><strong>打个补丁，告诉gevent,urllib正在进行IO操作</strong><br>通过导入monkey模块，来打这个补丁，原代码不变，就添加一行monkey.patch_all()即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">import gevent,time</span><br><span class="line">from gevent import monkey  # 导入monkey模块</span><br><span class="line"> </span><br><span class="line">monkey.patch_all()  # 把当前程序的所有的IO操作给作上标记</span><br><span class="line"> </span><br><span class="line">def run(url):</span><br><span class="line">    print(&quot;GET:&#123;0&#125;&quot;.format(url))</span><br><span class="line">    resp = request.urlopen(url)    # request.urlopen()函数 用来打开网页</span><br><span class="line">    data = resp.read()    # 读取爬到的数据</span><br><span class="line">    with open(&quot;url.html&quot;, &quot;wb&quot;) as f:</span><br><span class="line">        f.write(data)</span><br><span class="line">    print(&apos;&#123;0&#125; bytes received from &#123;1&#125;&apos;.format(len(data), url))</span><br><span class="line"> </span><br><span class="line">urls = [</span><br><span class="line">    &apos;http://www.163.com/&apos;,</span><br><span class="line">    &apos;https://www.yahoo.com/&apos;,</span><br><span class="line">    &apos;https://github.com/&apos;</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">time_start = time.time()    # 开始时间</span><br><span class="line">gevent.joinall([                     # 用gevent启动协程</span><br><span class="line">    gevent.spawn(run, &apos;http://www.163.com/&apos;),  # 第二个值是传入参数，之前我们没有讲，因为前面没有传参</span><br><span class="line">    gevent.spawn(run, &apos;https://www.yahoo.com/&apos;),</span><br><span class="line">    gevent.spawn(run, &apos;https://github.com/&apos;),</span><br><span class="line">])</span><br><span class="line">print(&quot;异步cost&quot;, time.time() - time_start)  # 程序执行消耗的时间</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-协程/20181029023811804.png" alt=""><br><strong><font color="red">时间会受到网络状态的影响</font></strong><br>&emsp;&emsp;通过打补丁来检测urllib，它就把urllib里面所有涉及到的有可能进行IO操作的地方直接花在前面加一个标记，这个标记就相当于gevent.sleep()，所以把urllib变成一个一有阻塞，它就切换了</p><h2 id="gevent实现单线程下的多socket并发"><a href="#gevent实现单线程下的多socket并发" class="headerlink" title="gevent实现单线程下的多socket并发"></a>gevent实现单线程下的多socket并发</h2><h3 id="server端"><a href="#server端" class="headerlink" title="server端"></a>server端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import sys,gevent,socket,time</span><br><span class="line">from gevent import socket,monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line">   </span><br><span class="line">def server(port):</span><br><span class="line">    s = socket.socket()</span><br><span class="line">    s.bind((&apos;0.0.0.0&apos;, port))</span><br><span class="line">    s.listen(500)</span><br><span class="line">    while True:</span><br><span class="line">        cli, addr = s.accept()</span><br><span class="line">        gevent.spawn(handle_request, cli)   #协程</span><br><span class="line">  </span><br><span class="line">def handle_request(conn):</span><br><span class="line">    try:</span><br><span class="line">        while True:</span><br><span class="line">            data = conn.recv(1024)</span><br><span class="line">            print(&quot;recv:&quot;, data)</span><br><span class="line">            conn.send(data)</span><br><span class="line">            if not data:</span><br><span class="line">                conn.shutdown(socket.SHUT_WR)</span><br><span class="line">    except Exception as  ex:</span><br><span class="line">        print(ex)</span><br><span class="line">    finally:</span><br><span class="line">        conn.close()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    server(8888)</span><br></pre></td></tr></table></figure><h3 id="client端"><a href="#client端" class="headerlink" title="client端"></a>client端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">   </span><br><span class="line">HOST = &apos;localhost&apos;    # The remote host</span><br><span class="line">PORT = 8888           # The same port as used by the server</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line">while True:</span><br><span class="line">    msg = bytes(input(&quot;&gt;&gt;:&quot;),encoding=&quot;utf8&quot;)</span><br><span class="line">    s.sendall(msg)</span><br><span class="line">    data = s.recv(1024)</span><br><span class="line">    print(&apos;Received&apos;, repr(data))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;协程，又称微线程。英文名Coroutine。一句话说明什么是协程：协程是一种用户态的轻量级线程。&lt;br&gt;&amp;emsp;&amp;emsp;协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此：&lt;br&gt;&amp;emsp;&amp;emsp;协程能保留上一次调用时的状态（即所有局部状态的一个特定组合），每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处逻辑流的位置。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-入门和基础</title>
    <link href="http://yoursite.com/2018/10/29/python-%E5%85%A5%E9%97%A8%E5%92%8C%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/10/29/python-入门和基础/</id>
    <published>2018-10-29T01:33:42.000Z</published>
    <updated>2018-11-24T05:53:16.631Z</updated>
    
    <content type="html"><![CDATA[<p>1.python代码需要符合pythonic<br>2.python用途：爬虫，大数据，测试，web，AI，脚本处理<br>Python 的缺点</p><ul><li>慢 ， 相较与 C / C++ 相比是很慢。<blockquote><ul><li>编译型语言（执行前先编译，编译成机器码，贴近机器语言，运行更快，适合底层开发），如C / C++</li><li>解释型语言（不编译，直接执行，适合上层开发），如 Python，JavaScript<br>Java, C# 有编译，但不编译成机器码，算中间语言。<br>效率 分 运行效率 与 开发效率。 像C/C++更多去调用底层的API等，运行效率高。但是开发效率不一定高。 而Python / JavaScript 是解释型语言，更多去关注上层，开发效率则会更高。随着计算机性能的提升，运行效率的差异越来越小，而更多的取决于开发效率。</li></ul></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.python代码需要符合pythonic&lt;br&gt;2.python用途：爬虫，大数据，测试，web，AI，脚本处理&lt;br&gt;Python 的缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢 ， 相较与 C / C++ 相比是很慢。&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;编译型语言（执
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-多进程</title>
    <link href="http://yoursite.com/2018/10/26/python-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/26/python-多进程/</id>
    <published>2018-10-26T15:15:10.000Z</published>
    <updated>2018-10-29T01:30:08.674Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;进程之间是相互独立的，进程没有GIL锁，而且不存在锁的概念，进程之间的数据式不能共享的，而线程是可以的。<br><a id="more"></a></p><h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h1><h2 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h2><p>&emsp;&emsp;用muliprocessing这个包中的Process来定义多进程，跟定义多线程类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process   # 导入进程模块</span><br><span class="line">import time</span><br><span class="line"> </span><br><span class="line">def run(name):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;hello&quot;, name)</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    p_obj_list = list()    # 存放进程对象</span><br><span class="line">    for i in range(10):    # 启动10个进程</span><br><span class="line">        p = Process(target=run, args=(&quot;QQ&#123;0&#125;&quot;.format(i),))  # 产生一个进程实例</span><br><span class="line">        p.start()   # 启动进程</span><br><span class="line">        p_obj_list.append(p)</span><br><span class="line">  </span><br><span class="line">    for p in p_obj_list:</span><br><span class="line">        p.join()   # 等待进程结果</span><br></pre></td></tr></table></figure><br><img src="/python-多进程/20181026112021180.png" alt=""></p><h2 id="进程中加入线程"><a href="#进程中加入线程" class="headerlink" title="进程中加入线程"></a>进程中加入线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import time,threading</span><br><span class="line"> </span><br><span class="line">def thread_run(name):   # 定义线程执行的方法</span><br><span class="line">    print(&quot;&#123;0&#125;:&#123;1&#125;&quot;.format(name, threading.get_ident()))  # thread.get_ident ()返回当前线程的标识符，标识符是一个非零整数</span><br><span class="line"> </span><br><span class="line">def run(name):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;hello&quot;, name)</span><br><span class="line">    t = threading.Thread(target=thread_run, args=(name,))   # 嵌入线程</span><br><span class="line">    t.start()   # 执行线程</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    p_obj_list = list()</span><br><span class="line">    for i in range(10):</span><br><span class="line">        p = Process(target=run, args=(&quot;QQ&#123;0&#125;&quot;.format(i),))</span><br><span class="line">        p.start()</span><br><span class="line">        p_obj_list.append(p)</span><br><span class="line"> </span><br><span class="line">    for p in p_obj_list:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure><p><img src="/python-多进程/20181026112235923.png" alt=""></p><h2 id="父子进程"><a href="#父子进程" class="headerlink" title="父子进程"></a>父子进程</h2><p>每个子进程都是由一个父进程启动的，每个程序也是有一个父进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"> </span><br><span class="line">def info(title):</span><br><span class="line">    print(title)</span><br><span class="line">    print(&apos;module name:&apos;, __name__)</span><br><span class="line">    print(&apos;parent process:&apos;, os.getppid())  # 获得父进程ID</span><br><span class="line">    print(&apos;process id:&apos;, os.getpid())  # 获得子进程ID</span><br><span class="line">    print(&apos;\n&apos;)</span><br><span class="line"> </span><br><span class="line">def f(name):</span><br><span class="line">    info(&apos;function f&apos;)</span><br><span class="line">    print(&apos;hello&apos;, name)</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    info(&apos;main process line&apos;)</span><br><span class="line">    p = Process(target=f, args=(&apos;QQ&apos;,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><br><img src="/python-多进程/20181026112550916.png" alt=""></p><h1 id="进程间数据交互与共享"><a href="#进程间数据交互与共享" class="headerlink" title="进程间数据交互与共享"></a>进程间数据交互与共享</h1><p>&emsp;&emsp;知道不同进程之间内存是不共享的，要想实现两个进程间的通信需要用到multiprocessing库中的queue（队列）模块，这个multiprocessing库中的queue模块跟单纯的queue库是不一样的。进程导入前者（这里的queue是专门为进程之间的通信设计的）不出错，导入后者（这里的queue主要是线程间数据交互）出错。</p><h3 id="线程访问queue"><a href="#线程访问queue" class="headerlink" title="线程访问queue"></a>线程访问queue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import queue,threading</span><br><span class="line"></span><br><span class="line">def f(q):</span><br><span class="line">    q.put([66, None, &apos;hello word&apos;])</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q = queue.Queue()   # 把这个q传给了子线程</span><br><span class="line">    p = threading.Thread(target=f, args=(q,))   # 子线程访问父线程的q</span><br><span class="line">    p.start()</span><br><span class="line">    print(q.get())</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/python-多进程/20181026112944166.png" alt=""></p><h3 id="进程访问queue"><a href="#进程访问queue" class="headerlink" title="进程访问queue"></a>进程访问queue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import queue</span><br><span class="line"></span><br><span class="line">def f(q):</span><br><span class="line">    q.put([66, None, &apos;hello word&apos;])</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q = queue.Queue()   # 把这个q传给了子线程</span><br><span class="line">    p = Process(target=f, args=(q,))   # 子线程访问父线程的q</span><br><span class="line">    p.start()</span><br><span class="line">    print(q.get())</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/python-多进程/20181026113140101.png" alt=""></p><h3 id="进程访问multiprocessing库中的Queue模块"><a href="#进程访问multiprocessing库中的Queue模块" class="headerlink" title="进程访问multiprocessing库中的Queue模块"></a>进程访问multiprocessing库中的Queue模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line"> </span><br><span class="line">def f(q):</span><br><span class="line">    q.put([66, None, &apos;hello word&apos;])</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    q = Queue()   # 把这个q传给了子线程</span><br><span class="line">    p = Process(target=f, args=(q,))   # 子线程访问父线程的q</span><br><span class="line">    p.start()</span><br><span class="line">    print(q.get())</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/python-多进程/20181026113249257.png" alt=""><br>&emsp;&emsp;父进程相当于克隆一个Q，把自己的Q克隆了一份交给子进程，子进程这个时候往Q里面放了一份数据，然后父进程又能实际的获取到。但是你克隆了一份是不是就和父进程没有关系了，为什么还能联系在一起呢？但是实际上：等于这两个Q里面的数据又把它序列化了，序列化到一个中间的地方，类似于翻译，然后反序列化给这个父进程这边来了，其实这两个Q就是通过pickle来序列化的，不是一个真正的Q。<br><strong>小结：两个线程之间可以修改一个数据，不加锁，可能就会出错。现在进程中的Queue，是实现了数据的传递，不是在修改同一份数据，只是实现一个进程的数据传给了另外一个进程。</strong></p><h2 id="Pipe-实现进程间的数据交互，manger实现数据共享"><a href="#Pipe-实现进程间的数据交互，manger实现数据共享" class="headerlink" title="Pipe()实现进程间的数据交互，manger实现数据共享"></a>Pipe()实现进程间的数据交互，manger实现数据共享</h2><p>&emsp;&emsp;上面的例子是通过进程中的Queue，来进行数据共享的，其实还有一种方式实现数据共享，那就是管道，pipe，以及数据共享manger。</p><h3 id="Pipe-函数"><a href="#Pipe-函数" class="headerlink" title="Pipe()函数"></a>Pipe()函数</h3><p>&emsp;&emsp;管道函数会返回由管道双方连接的一组连接对象，该管道默认是双向的(双向的)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process, Pipe</span><br><span class="line"> </span><br><span class="line">def f(conn):</span><br><span class="line">    conn.send([66, None, &apos;hello,word&apos;])  # 发送消息给父进程</span><br><span class="line">    conn.send([66, None, &apos;hello,word2&apos;])  # 发送消息给父进程</span><br><span class="line">    conn.close()</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    parent_conn, child_conn = Pipe()  # 管道生成返回两个实例，是双向的，这边把第1个作为父连接，第2个作为子连接。也可以，两者角色调换一下</span><br><span class="line">    p = Process(target=f, args=(child_conn,))</span><br><span class="line">    p.start()</span><br><span class="line">    print(parent_conn.recv())   # 接收子进程的消息</span><br><span class="line">    print(parent_conn.recv())   # 接收子进程的消息</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-多进程/20181027010733552.png" alt=""><br><strong>如果父进程在接收,但是子进程没有发,那么父进程就会一直等待下去</strong></p><h3 id="manger"><a href="#manger" class="headerlink" title="manger()"></a>manger()</h3><p>&emsp;&emsp;manger可以完成数据间的共享。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process, Manager</span><br><span class="line">import os</span><br><span class="line"> </span><br><span class="line">def f(d, l):</span><br><span class="line">    d[os.getpid()] = os.getpid()</span><br><span class="line">    l.append(os.getpid())</span><br><span class="line">    print(l)</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    with Manager() as manager:</span><br><span class="line">        d = manager.dict()   # 声明一个字典，这个字典是用manger声明的，不是用dict()声明的</span><br><span class="line">        # manger.dict()是用专门的语法生产一个可在多进程之间进行传递和共享的一个字典</span><br><span class="line">        l = manager.list(range(5))  # 同样声明一个列表</span><br><span class="line">        p_list = []</span><br><span class="line">        for i in range(10):</span><br><span class="line">            p = Process(target=f, args=(d, l))</span><br><span class="line">            p.start()</span><br><span class="line">            p_list.append(p)</span><br><span class="line">        for res in p_list:</span><br><span class="line">            res.join()</span><br><span class="line">        print(d)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-多进程/20181027012451920.png" alt=""><br><strong>线程修改同一份数据的时候需要加锁，进程修改数据呢：不用加锁，因为这个manger已经帮你加锁了，它就默认不允许两个进程同时修改一份数据。两个进程没有办法同时修改一份数据，进程之间是独立的，它自己也要加锁，因为它把自己的东西同时copy好几份，跟刚刚的那个Queue一样，copy10个字典最终合成一个字典</strong></p><h1 id="进程锁和进程池"><a href="#进程锁和进程池" class="headerlink" title="进程锁和进程池"></a>进程锁和进程池</h1><h2 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h2><p>&emsp;&emsp;通过multiprocessing中的Lock模块来实现进程锁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Lock   # 导入进程锁</span><br><span class="line"> </span><br><span class="line">def f(l, i):</span><br><span class="line">    l.acquire()    # 加锁</span><br><span class="line">    print(&quot;hello word&quot;, i)</span><br><span class="line">    l.release()   # 释放锁</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    lock = Lock()     # 定义锁</span><br><span class="line">    for num in range(10):</span><br><span class="line">        Process(target=f, args=(lock, num,)).start()  # 把锁传入进程中</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-多进程/20181027014001015.png" alt=""><br><strong>进程中不是相互独立的吗？为什么还要加锁：虽然每个进程都是独立运行的，但是问题来了，它们共享一块屏幕。这个锁存在的意义就是屏幕共享。如果进程1想着打印数据，而进程2想也想打印数据的情况，就有可能乱套了，然后通过这个锁来控制，去打印的时候，这个屏幕只有我独占，导致屏幕不会乱。</strong></p><h2 id="进程池apply和apply-saync"><a href="#进程池apply和apply-saync" class="headerlink" title="进程池apply和apply_saync"></a>进程池apply和apply_saync</h2><h3 id="appley"><a href="#appley" class="headerlink" title="appley"></a>appley</h3><p>&emsp;&emsp;同步执行，也就是<strong>串行执行</strong>的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool  # 导入进程池模块pool</span><br><span class="line">import time,os</span><br><span class="line"> </span><br><span class="line">def foo(i):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;in process&quot;, os.getpid())  # 打印进程号</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    pool = Pool(processes=5)   # 设置进程池个数为5，也可以写成pool = Pool(5)，允许进程池同时放入5个进程，并且这5个进程交给cpu去运行</span><br><span class="line">    for i in range(10):</span><br><span class="line">        pool.apply(func=foo, args=(i,))   # 同步执行挂起进程</span><br><span class="line">    print(&apos;end&apos;)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  # 进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span><br></pre></td></tr></table></figure><br><strong>一个一个打印</strong><br><img src="http://qiniu.rearib.top/python-多进程/20181027015536404.png" alt=""></p><h3 id="apply-saync"><a href="#apply-saync" class="headerlink" title="apply_saync"></a>apply_saync</h3><p>&emsp;&emsp;异步执行，也就是<strong>并行执行</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool  # 导入进程池模块pool</span><br><span class="line">import time,os</span><br><span class="line"> </span><br><span class="line">def foo(i):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;in process&quot;, os.getpid())  # 打印进程号</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    pool = Pool(processes=5)   # 设置进程池个数为5，也可以写成pool = Pool(5)，允许进程池同时放入5个进程，并且这5个进程交给cpu去运行</span><br><span class="line">    for i in range(10):</span><br><span class="line">        pool.apply_async(func=foo, args=(i,))   # 采用异步方式执行foo函数</span><br><span class="line">    print(&apos;end&apos;)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  # 进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/python-多进程/20181027015657931.png" alt=""></p><h3 id="异步下回调函数"><a href="#异步下回调函数" class="headerlink" title="异步下回调函数"></a>异步下回调函数</h3><p>&emsp;&emsp;程序执行完毕之后，再回调过来执行这个Bar函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Pool</span><br><span class="line">import time,os</span><br><span class="line"> </span><br><span class="line">def foo(i):</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;in process&quot;, os.getpid())  # 打印子进程的进程号</span><br><span class="line">    return i</span><br><span class="line"> </span><br><span class="line">def bar(arg):</span><br><span class="line">    print(&apos;--&gt;exec done:&apos;, arg, os.getpid())   # 打印进程号</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    pool = Pool(processes=2)</span><br><span class="line">    print(&quot;主进程&quot;, os.getpid())   # 主进程的进程号</span><br><span class="line">    for i in range(3):</span><br><span class="line">        pool.apply_async(func=foo, args=(i,), callback=bar)   # 执行回调函数callback=Bar,在主进程中执行</span><br><span class="line">    print(&apos;end&apos;)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()  # 进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。</span><br></pre></td></tr></table></figure><br><strong>五个五个打印</strong><br><img src="http://qiniu.rearib.top/python-多进程/20181027015941615.png" alt=""><br><strong>回调函数在主进程执行,传入的参数来自子进程</strong></p><ul><li>回调函数说明fun=Foo干不完就不执行bar函数，等Foo执行完就去执行Bar</li><li>这个回调函数是主进程去调用的，而不是每个子进程去调用的。</li><li>回调函数的用处：<blockquote><p>比如说你从各个机器上备份完毕，在回调函数中自动写一个脚本，说备份完毕</p></blockquote></li><li>回调函数是主进程调用的原因？<blockquote><p>如果是子进程去调用这个回调函数，有多少个子进程就有多少个连接，如果是主进程的话，只需要一次长连接就可以了，这个效率就高了</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;进程之间是相互独立的，进程没有GIL锁，而且不存在锁的概念，进程之间的数据式不能共享的，而线程是可以的。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-线程与进程</title>
    <link href="http://yoursite.com/2018/10/26/python-%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/26/python-线程与进程/</id>
    <published>2018-10-26T01:47:08.000Z</published>
    <updated>2018-10-26T09:47:05.094Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;计算机所有的指令的操作都是有CPU来负责的，cpu是来负责运算的。<strong>OS(操作系统) 调度cpu的最小单位就是线程。</strong><br>&emsp;&emsp;进程：是以一个整体的形式暴露给操作系统管理，里面包含对各种资源的调用，内存的管理，网络接口的调用等等，是各种资源管理的集合<br>&emsp;&emsp;线程：是操作系统的最小的调度单位，是一串指令的集合。<br><a id="more"></a><br><img src="http://qiniu.rearib.top/1/20181026100045261.png" alt=""></p><h2 id="进程-Process）"><a href="#进程-Process）" class="headerlink" title="进程(Process）"></a>进程(Process）</h2><p>&emsp;&emsp;程序并不能单独运行，只有将程序装载到内存中，系统为它分配资源才能运行，而这种执行的程序就称之为进程。程序和进程的区别就在于：<strong>程序是指令的集合，它是进程运行的静态描述文本；进程是程序的一次执行活动，属于动态概念。</strong><br>&emsp;&emsp;在多道编程中，我们允许多个程序同时加载到内存中，在操作系统的调度下，可以实现并发地执行。这是这样的设计，大大提高了CPU的利用率。进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的。</p><h2 id="线程-Thead"><a href="#线程-Thead" class="headerlink" title="线程(Thead)"></a>线程(Thead)</h2><p>&emsp;&emsp;线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，<strong>一个进程中可以并发多个线程，每条线程并行执行不同的任务。</strong></p><h2 id="有了进程为什么还要线程"><a href="#有了进程为什么还要线程" class="headerlink" title="有了进程为什么还要线程?"></a>有了进程为什么还要线程?</h2><p>&emsp;&emsp;进程有很多优点，它提供了多道编程，让我们感觉我们每个人都拥有自己的CPU和其他资源，可以提高计算机的利用率。很多人就不理解了，既然进程这么优秀，为什么还要线程呢？其实，仔细观察就会发现进程还是有很多缺陷的，主要体现在两点上：</p><ul><li>进程只能在一个时间干一件事，如果想同时干两件事或多件事，进程就无能为力了。</li><li>进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。</li></ul><p>&emsp;&emsp;例如，我们在使用qq聊天， qq做为一个独立进程如果同一时间只能干一件事，那他如何实现在同一时刻：即能监听键盘输入、又能监听其它人给你发的消息、同时还能把别人发的消息显示在屏幕上呢？你会说，操作系统不是有分时么？但是分时是指在不同进程间的分时， 即操作系统处理一会你的qq任务，又切换到word文档任务上了，每个cpu时间片分给你的qq程序时，事实上，你的qq还是同一时间只能干一件事情。<br>&emsp;&emsp;再直白一点， 一个操作系统就像是一个工厂，工厂里面有很多个生产车间，不同的车间生产不同的产品，每个车间就相当于一个进程，且你的工厂又穷，供电不足，同一时间只能给一个车间供电，为了能让所有车间都能同时生产，你的工厂的电工只能给不同的车间分时供电，但是轮到你的qq车间时，发现只有一个干活的工人，结果生产效率极低，为了解决这个问题，就需要多加几个工人，让几个人工人并行工作，这每个工人，就是线程！</p><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ul><li>线程是共享内存空间的；进程的内存是独立的。</li><li>线程可以直接访问此进程中的数据部分；进程有他们独立拷贝自己父进程的数据部分，每个进程是独立的</li><li>同一进程的线程之间直接交流(直接交流涉及到数据共享，信息传递)；两个进程想通信，必须通过一个中间代理来实现。</li><li>创建一个新的线程很容易；创建新的进程需要对其父进程进行一次克隆。</li><li>一个线程可以控制和操作同一进程里的其他线程；但是进程只能操作子进程。</li><li>对主线程的修改，可能会影响到进程中其他线程的修改；对于一个父进程的修改不会影响其他子进程(只要不删除父进程即可)<h2 id="概念小结"><a href="#概念小结" class="headerlink" title="概念小结"></a>概念小结</h2></li><li>线程是操作系统最小的调度单位，是一串指令的集合。</li><li>进程要操作CPU，必须先创建一个线程。</li><li>进程本身是不可以执行的，操作cpu是通过线程实现的，因为它是一堆执行，而进程是不具备执行概念的。就像一个屋子，屋子就是进程，但是屋子里面的每一个人就是线程，屋子就是内存空间。</li><li>单核CPU只能同时干一件事，但是为什么给我们的感觉是在干了很多件事？因为CPU太快了，可以有N多次切换。</li><li>进程是通过PID来区分的，并不是通过进程名来区分的。进程里面的第一个线程就是主线程，父线程和子线程是相互独立的，只是父线程创建了子线程，父线程down了，子线程不会受到影响的。</li><li>主线程修改会影响其他线程，因为它们是共享数据的。</li><li>线程启动比进程块，但是运行速度没有可比性</li></ul><h1 id="threading-Thread模块"><a href="#threading-Thread模块" class="headerlink" title="threading.Thread模块"></a>threading.Thread模块</h1><h2 id="函数式多线程"><a href="#函数式多线程" class="headerlink" title="函数式多线程"></a>函数式多线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">def run(n):</span><br><span class="line">    print(&quot;run&quot;, n)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(n,&apos;end time:&apos;,time.time())</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">第一个参数是线程函数变量，第二个参数args是一个元组变量参数，如果只传递一个值，就只需要i,</span><br><span class="line">如果需要传递多个参数，那么还可以继续传递下去其他的参数，其中的逗号不能少，少了逗号位置参数指引就会出错。</span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">t1 = threading.Thread(target=run, args=(&quot;t1&quot;,))  # 生成线程对象</span><br><span class="line">t2 = threading.Thread(target=run, args=(&quot;t2&quot;,))</span><br><span class="line"></span><br><span class="line">print(&apos;start:&apos;,time.time())</span><br><span class="line">t1.start()  # start()函数启动一个线程</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/线程与进程/20181026101728106.png" alt=""></p><h2 id="继承式多线程"><a href="#继承式多线程" class="headerlink" title="继承式多线程"></a>继承式多线程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">class MyThread(threading.Thread):   # 继承threading.Thread</span><br><span class="line">    &quot;&quot;&quot;继承式多线程&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, n):</span><br><span class="line">        super(MyThread,self).__init__()  # 也可以写成这样threading.Thread.__init__(self)</span><br><span class="line">        self.n = n</span><br><span class="line"> </span><br><span class="line">    def run(self):     # 重写run方法</span><br><span class="line">        &quot;&quot;&quot;这个方法不能叫别的名字，只能叫run方法&quot;&quot;&quot;</span><br><span class="line">        print(&quot;run&quot;, self.n)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(self.n,&apos;end time:&apos;,time.time())</span><br><span class="line">        </span><br><span class="line">t1 = MyThread(&quot;t1&quot;)   # 实例化</span><br><span class="line">t2 = MyThread(&quot;t2&quot;)</span><br><span class="line"></span><br><span class="line">print(&apos;start:&apos;,time.time()) </span><br><span class="line">t1.start()   # 启动一个多线程</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/线程与进程/20181026102059476.png" alt=""></p><p>&amp;emsp；&amp;emsp；在上面两个示例代码中，都包含一个主线程和两个子线程，主线程在启动子线程后，子线程就是独立的，所以主线程不会等待子线程的sleep就直接运行下去。如果实现等待线程执行结果可以使用join。</p><h2 id="join函数"><a href="#join函数" class="headerlink" title="join函数"></a>join函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">class MyThread(threading.Thread):   # 继承threading.Thread</span><br><span class="line">    &quot;&quot;&quot;继承式多线程&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, n):</span><br><span class="line">        super(MyThread,self).__init__()  # 也可以写成这样threading.Thread.__init__(self)</span><br><span class="line">        self.n = n</span><br><span class="line"> </span><br><span class="line">    def run(self):     # 重写run方法</span><br><span class="line">        &quot;&quot;&quot;这个方法不能叫别的名字，只能叫run方法&quot;&quot;&quot;</span><br><span class="line">        print(&quot;run&quot;, self.n)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        print(self.n,&apos;end time:&apos;,time.time())</span><br><span class="line">        </span><br><span class="line">t1 = MyThread(&quot;t1&quot;)   # 实例化</span><br><span class="line">t2 = MyThread(&quot;t2&quot;)</span><br><span class="line"></span><br><span class="line">print(&apos;start:&apos;,time.time()) </span><br><span class="line">t1.start()   # 启动一个多线程</span><br><span class="line">t1.join()</span><br><span class="line">t2.start()</span><br><span class="line">print(&apos;main end time:&apos;,time.time())</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/线程与进程/20181026103100213.png" alt=""></p><ul><li>加了join之后，主线程依赖子线程执行完毕才往下走。</li></ul><p><strong>如果想要的是线程依然是并行效果，就需要更换join()的位置</strong><br><img src="http://qiniu.rearib.top/线程与进程/20181026102935930.png" alt=""></p><h2 id="计算多线程执行时间"><a href="#计算多线程执行时间" class="headerlink" title="计算多线程执行时间"></a>计算多线程执行时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">def run(n):  # 这边的run方法的名字是自行定义的，跟继承式多线程不一样，那个是强制的</span><br><span class="line">    print(&quot;task:&quot;, n)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;task done&quot;, n)</span><br><span class="line"> </span><br><span class="line">start_time = time.time()  # 开始时间</span><br><span class="line">t_obj = []  # 存放子线程实例</span><br><span class="line">for i in range(10):  # 一次性启动10个线程</span><br><span class="line">    t = threading.Thread(target=run, args=(&quot;t-&#123;0&#125;&quot;.format(i),))</span><br><span class="line">    t.start()</span><br><span class="line">    t_obj.append(t)   # 为了不阻塞后面线程的启动，不在这里join，先放到一个列表中</span><br><span class="line"> </span><br><span class="line">for t in t_obj:  # 循环线程实例列表，等待所有线程执行完毕</span><br><span class="line">    t.join() </span><br><span class="line"> </span><br><span class="line">print(&quot;--------all thread has finished&quot;)</span><br><span class="line">print(&quot;cost:&quot;, time.time() - start_time)  # 计算总耗时</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/线程与进程/20181026103423804.png" alt=""></p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>&emsp;&emsp;只要主线程执行完毕，它不管子线程有没有执行完毕，就退出。现在就可以把所有的子线程变成守护线程。<strong>子线程变成守护线程之后，主程序就不会等子线程结束再退出了</strong>。说白了，设置一个主人，在设置几个仆人，这几个仆人都是为主人服务的。可以帮主人做很多事情，一个主人（主线程）可以有多个仆人（守护线程），服务的前提是，主线程必须存在，如果主线程不存在，则守护进程也没了。那守护进程是干嘛的呢？可以管理一些资源，打开一些文件，监听一些端口，监听一些资源，把一些垃圾资源回收，可以干很多事情，可以随便定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"></span><br><span class="line">def run(n):</span><br><span class="line">    print(&quot;task:&quot;, n)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;task done&quot;, n)</span><br><span class="line"> </span><br><span class="line">start_time = time.time()</span><br><span class="line">for i in range(5):</span><br><span class="line">    t = threading.Thread(target=run,args=(&quot;t-&#123;0&#125;&quot;.format(i),))</span><br><span class="line">    t.setDaemon(True)  # Daemon意思是守护进程，这边是把当前线程设置为守护线程</span><br><span class="line">    t.start()</span><br><span class="line"> </span><br><span class="line">print(&quot;--------all thread has finished&quot;)</span><br><span class="line">print(&quot;cost:&quot;, time.time() - start_time)</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/线程与进程/20181026103850709.png" alt=""><br><strong>守护进程一定要在start之前设置，start之后就不能设置了，之后设置会报错</strong></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>&emsp;&emsp;比如写一个socket_server，每一个链接过来，socket_server就会给这个链接分配一个新的线程。如果我手动的把socket_server停掉。那这种情况你必须手动停掉服务，那它就要down了，这种情况下还要等线程结束吗？就不用等线程结束了，它自己就直接结束了。这样，是不是就可以把每个socket线程设置一个守护线程，主线程一旦down掉，就全部退出。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>theading.current_thead()查看当前线程；</li><li>用theading.active_count()来统计当前活动的线程数</li><li>线程个数=子线程数+主线程数</li></ul><h1 id="GIL锁-全局解释器锁"><a href="#GIL锁-全局解释器锁" class="headerlink" title="GIL锁(全局解释器锁)"></a>GIL锁(全局解释器锁)</h1><p>&emsp;&emsp;计算机有4核，代表着同一时间，可以干4个任务。如果单核cpu的话，我启动10个线程，我看上去也是并发的，因为是执行了上下文的切换，让看上去是并发的。但是单核永远肯定时串行的，它肯定是串行的，cpu真正执行的时候，因为一会执行1，一会执行2.。。。。正常的线程就是这个样子的。但是，在python中，无论有多少核，永远都是假象。无论是4核，8核，还是16核…….不好意思，同一时间执行的线程只有一个(线程)，它就是这个样子的。这个是python的一个开发时候，设计的一个缺陷，所以说python中的线程是假线程。</p><h2 id="GIL存在的意义"><a href="#GIL存在的意义" class="headerlink" title="GIL存在的意义"></a><a href="https://www.cnblogs.com/gengcx/p/7500401.html" target="_blank" rel="noopener">GIL存在的意义</a></h2><p>&emsp;&emsp;在新处理器上运行的程序要想充分利用其性能，必须按照并发方式进行重写。大部分开发者听到“并发”通常会立刻想到多线程的程序。目前来说，多线程执行还是利用多核系统最常用的方式。尽管多线程编程大大好于“顺序”编程，不过即便是仔细的程序员也没法在代码中将并发性做到最好。编程语言在这方面应该做的更好，大部分应用广泛的现代编程语言都会支持多线程编程。<br>&emsp;&emsp;要想利用多核系统，Python必须支持多线程运行。作为解释型语言，Python的解释器必须做到既安全又高效。我们都知道多线程编程会遇到的问题。解释器要留意的是避免在不同的线程操作内部共享的数据。同时它还要保证在管理用户线程时保证总是有最大化的计算资源。<br>&emsp;&emsp;那么，不同线程同时访问时，数据的保护机制是怎样的呢？答案是解释器全局锁。从名字上看能告诉我们很多东西，很显然，这是一个加在解释器上的全局（从解释器的角度看）锁（从互斥或者类似角度看）。这种方式当然很安全，但是它有一层隐含的意思（Python初学者需要了解这个）：对于任何Python程序，不管有多少的处理器，任何时候都总是只有一个线程在执行。</p><h2 id="GIL锁关系图"><a href="#GIL锁关系图" class="headerlink" title="GIL锁关系图"></a>GIL锁关系图</h2><p>&emsp;&emsp;GIL(全局解释器锁)是加在python解释器里面的，效果如图：<br><img src="http://qiniu.rearib.top/线程与进程/20181026110513560.png" alt=""><br><strong>总结:</strong><br>&emsp;&emsp;需要明确的一点是<strong>GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念</strong>。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。<strong>所以在很多人的概念里CPython就是Python，也就想当然的把GIL归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL。</strong></p><ul><li>CPython：是用C语言实现Pyhon，是目前应用最广泛的解释器。</li></ul><h1 id="线程锁（互斥锁）"><a href="#线程锁（互斥锁）" class="headerlink" title="线程锁（互斥锁）"></a>线程锁（互斥锁）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">def run(n):</span><br><span class="line">    global num   # 把num变成全局变量</span><br><span class="line">    time.sleep(1)  # 注意了sleep的时候是不占有cpu的，这个时候cpu直接把这个线程挂起了，此时cpu去干别的事情去了</span><br><span class="line">    num += 1   # 所有的线程都做+1操作</span><br><span class="line"> </span><br><span class="line">num = 0   # 初始化num为0</span><br><span class="line">t_obj = list()</span><br><span class="line">for i in range(100):</span><br><span class="line">    t = threading.Thread(target=run, args=(&quot;t-&#123;0&#125;&quot;.format(i),))</span><br><span class="line">    t.start()</span><br><span class="line">    t_obj.append(t)</span><br><span class="line"> </span><br><span class="line">for t in t_obj:</span><br><span class="line">    t.join()</span><br><span class="line"> </span><br><span class="line">print(&quot;--------all thread has finished&quot;)</span><br><span class="line">print(&quot;num:&quot;, num)   # 输出最后的num值</span><br><span class="line"></span><br><span class="line">#执行结果</span><br><span class="line">--------all thead has finished</span><br><span class="line">(&apos;num:&apos;, 97)  #输出的结果</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其实这种情况只能在python2.x 中才会出现的，python3.x里面没有这种现象，下面我们就用一张图来解释一下这个原因。如图：<br><img src="http://qiniu.rearib.top/线程与进程/20181026114846189.png" alt=""><br>解释：</p><ul><li>到第5步的时候，可能这个时候python正好切换了一次GIL(据说python2.7中，每100条指令会切换一次GIL),执行的时间到了，被要求释放GIL,这个时候thead 1的count=0并没有得到执行，而是挂起状态，count=0这个上下文关系被存到寄存器中.</li><li>然后到第6步，这个时候thead 2开始执行，然后就变成了count = 1,返回给count，这个时候count=1.</li><li>然后再回到thead 1，这个时候由于上下文关系，thead 1拿到的寄存器中的count = 0，经过计算，得到count = 1，经过第13步的操作就覆盖了原来的count = 1的值，所以这个时候count依然是count = 1，所以这个数据并没有保护起来。</li></ul><h2 id="添加线程锁"><a href="#添加线程锁" class="headerlink" title="添加线程锁"></a>添加线程锁</h2><p>&emsp;&emsp;通过上面的图我们知道，结果依然是不准确的。所以我还要加一把锁，这个是用户级别的锁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"></span><br><span class="line">def run(n):</span><br><span class="line">    lock.acquire()  # 添加线程锁</span><br><span class="line">    global num      # 把num变成全局变量</span><br><span class="line">    time.sleep(0.1) # 注意了sleep的时候是不占有cpu的，这个时候cpu直接把这个线程挂起了，此时cpu去干别的事情去了</span><br><span class="line">    num += 1        # 所有的线程都做+1操作</span><br><span class="line">    lock.release()  # 释放线程锁</span><br><span class="line"> </span><br><span class="line">num = 0   # 初始化num为0</span><br><span class="line">lock = threading.Lock()  # 生成线程锁实例</span><br><span class="line">t_obj = list()</span><br><span class="line">for i in range(10):</span><br><span class="line">    t = threading.Thread(target=run, args=(&quot;t-&#123;0&#125;&quot;.format(i),))</span><br><span class="line">    t.start()</span><br><span class="line">    t_obj.append(t)</span><br><span class="line"> </span><br><span class="line">for t in t_obj:</span><br><span class="line">    t.join()   # 为join是等子线程执行的结果，如果不加，主线程执行完，下面就获取不到子线程num的值了，共享数据num值就错误了</span><br><span class="line"></span><br><span class="line">print(&quot;--------all thread has finished&quot;)</span><br><span class="line">print(&quot;num:&quot;, num)   # 输出最后的num值</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/线程与进程/20181026115312595.png" alt=""><br><strong>小结：</strong></p><ul><li>用theading.Lock()创建一个lock的实例。</li><li>在线程启动之前通过lock.acquire()加加锁，在线程结束之后通过lock.release()释放锁。</li><li>这层锁是用户开的锁，就是我们用户程序的锁。跟我们这个GIL没有关系，但是它把这个数据相当于copy了两份，所以在这里加锁，以确保同一时间只有一个线程，真真正正的修改这个数据，所以这里的锁跟GIL没有关系，你理解就是自己的锁。</li><li>加锁，说明此时我来去修改这个数据，其他人都不能动。然后修改完了，要把这把锁释放。这样的话就把程序编程串行了。</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>&emsp;&emsp;在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁，因为系统判断这部分资源都正在使用，所有这两个线程在无外力作用下将一直等待下去.（大锁内加小锁）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import threading,time </span><br><span class="line"></span><br><span class="line">mutexA=threading.Lock()</span><br><span class="line">mutexB=threading.Lock()</span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line"></span><br><span class="line">    def func1(self):</span><br><span class="line">        print(&apos;%s func1 start&apos;%self.name)</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;%s func1 拿到A锁 &apos;%self.name)</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;%s func1 拿到B锁 &apos;%self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line">        mutexA.release()</span><br><span class="line">        print(&apos;%s func1 end&apos;%self.name)</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        print(&apos;%s func2 start&apos;%self.name)</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;%s func2 拿到B锁 &apos;%self.name)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;%s func2 拿到A锁 &apos;%self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line">        mutexB.release()</span><br><span class="line">        print(&apos;%s func2 end&apos;%self.name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(5):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/线程与进程/20181026044139986.png" alt=""><br>线程1拿到B锁，线程3拿到A锁，造成同时等待，而且线程2、4、5也会因为拿不到锁等待。</p><h2 id="递归锁（RLock）"><a href="#递归锁（RLock）" class="headerlink" title="递归锁（RLock）"></a>递归锁（RLock）</h2><p>&emsp;&emsp;这个RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次require。直到一个线程所有的acquire都被release，其他的线程才能获得资源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import threading,time </span><br><span class="line"></span><br><span class="line">mutexA=mutexB=threading.RLock()</span><br><span class="line"></span><br><span class="line">class MyThread(threading.Thread):</span><br><span class="line">    def run(self):</span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line"></span><br><span class="line">    def func1(self):</span><br><span class="line">        print(&apos;%s func1 start&apos;%self.name)</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;%s func1 拿到A锁 &apos;%self.name)</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;%s func1 拿到B锁 &apos;%self.name)</span><br><span class="line">        mutexB.release()</span><br><span class="line">        mutexA.release()</span><br><span class="line">        print(&apos;%s func1 end&apos;%self.name)</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        print(&apos;%s func2 start&apos;%self.name)</span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(&apos;%s func2 拿到B锁 &apos;%self.name)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(&apos;%s func2 拿到A锁 &apos;%self.name)</span><br><span class="line">        mutexA.release()</span><br><span class="line">        mutexB.release()</span><br><span class="line">        print(&apos;%s func2 end&apos;%self.name)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    for i in range(5):</span><br><span class="line">        t=MyThread()</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><br><img src="http://qiniu.rearib.top/线程与进程/20181026045033501.png" alt=""><br><img src="http://qiniu.rearib.top/线程与进程/20181026045227839.png" alt=""><br>&emsp;&emsp;由于锁A，B是同一个递归锁，thread1拿到A,B锁，counter记录了acquire的次数2次，然后在func1执行完毕，就释放递归锁，在thread1释放完递归锁，执行完func1代码，接下来会有2种可能：1、thread1在次抢到递归锁，执行func2代码 2、其他的线程抢到递归锁，去执行func1的任务代码<br><strong>递归锁用于多重锁的情况，如果只是一层锁，就用不上递归锁</strong><br>递归锁原理其实很简单：就是每开一把门，在字典里面存一份数据，退出的时候去到door1或者door2里面找到这个钥匙退出，如图：<br><img src="http://qiniu.rearib.top/线程与进程/20181026050112225.png" alt=""></p><h2 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h2><p>&emsp;&emsp;之前讲的线程锁（互斥锁）同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。</p><ul><li>信号量是一个变量，控制着对公共资源或者临界区的访问。信号量维护着一个计数器，指定可同时访问资源或者进入临界区的线程数。 </li><li>每次有一个线程获得信号量时，计数器-1。若计数器为0，其他线程就停止访问信号量，直到另一个线程释放信号量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">def run(n):</span><br><span class="line">    semaphore.acquire()   # 加信号量锁</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    print(&quot;run the thread: %s\n&quot; % n)</span><br><span class="line">    semaphore.release()   # 释放信号量锁</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    semaphore = threading.BoundedSemaphore(5)  # 最多允许5个线程同时运行(Bounded:绑定，Semaphore：信号量)</span><br><span class="line">    for i in range(20):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        t.start()</span><br><span class="line">while threading.active_count() != 1:</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    print(&apos;----all threads done---&apos;)</span><br></pre></td></tr></table></figure><p>上面程序的执行，会让人感觉是：分了4组，前5个同时完成，然后又5个同时进去。但是实际的效果是：这5个里面如果有3个完成，就会立刻再放3个进去。不会等5个都完成，每出来1个就放进去1个，出来几个放进去几个<br><strong>使用场景和总结</strong></p><ul><li>连接池，线程池，MySQL的有连接池，同一时间有多少个并发，就能连多少个连接。</li><li>我们为了保证我的socket_server，因为python不会默认现在你启动多少个线程，但是你启动的线程越多，就会把系统拉的越慢，就会把程序拉的越慢。这里就可以搞一个我同一时间放100线程个进来，就是用semaphore</li></ul><h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><p>&emsp;&emsp;事件处理的机制：全局定义了一个“Flag”，如果“Flag”值为 False，那么当程序执行 event.wait 方法时就会阻塞，如果“Flag”值为True，那么event.wait 方法时便不再阻塞。<br><strong>threading.Event 实现线程间通信,使用threading.Event可以使一个线程等待其他线程的通知</strong></p><blockquote><ul><li>event = threading.Event()   # 设置一个事件的全局变量</li><li>event.is_set()       # 判断是否已经设置标志位。</li><li>event.wait()         # 没有设置标志位的时候会阻塞，一遇到标志位就不会阻塞 #判断是否已经设置标志位。</li><li>event.set()          # 设置标志位 ，标志位设置了，代表着绿灯，直接通行。</li><li>event.clear()        # 清除标志位，标志位被清空，代表红灯，wait等待变绿灯。</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import threading,time</span><br><span class="line"> </span><br><span class="line">event = threading.Event()  # 生成线程事件实例</span><br><span class="line"> </span><br><span class="line">def lighter():</span><br><span class="line">    count = 0</span><br><span class="line">    event.set()   # 先设置标志位,代表绿灯</span><br><span class="line">    while True:</span><br><span class="line">        if count &gt; 5 and count &lt; 10:   # 改成红灯</span><br><span class="line">            event.clear()    # 清除标志位，变成红灯</span><br><span class="line">            print(&quot;red light is on ....&quot;)</span><br><span class="line">        elif count &gt; 10:</span><br><span class="line">            event.set()   # 创建标志位，变成绿灯</span><br><span class="line">            count = 0</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;green light is on ....&quot;)</span><br><span class="line"> </span><br><span class="line">        time.sleep(1)</span><br><span class="line">        count += 1</span><br><span class="line"> </span><br><span class="line">def car(name):</span><br><span class="line">    while True:</span><br><span class="line">        if event.is_set():   # 有标志位，代表是绿灯</span><br><span class="line">            print(&quot;&#123;0&#125; running ....&quot;.format(name))</span><br><span class="line">            time.sleep(1)</span><br><span class="line">        else:   # 如果不是绿灯就代表红灯</span><br><span class="line">            print(&quot;&#123;0&#125; sees red light ,waiting ....&quot;.format(name))</span><br><span class="line">            event.wait()   # 阻塞</span><br><span class="line">            print(&quot;green light is on , start going ...&quot;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">light = threading.Thread(target=lighter,)  # 启动代表红绿灯的线程</span><br><span class="line">light.start()</span><br><span class="line">car1 = threading.Thread(target=car, args=(&quot;car1&quot;,))  # 启动代表车的线程</span><br><span class="line">car1.start()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;计算机所有的指令的操作都是有CPU来负责的，cpu是来负责运算的。&lt;strong&gt;OS(操作系统) 调度cpu的最小单位就是线程。&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;进程：是以一个整体的形式暴露给操作系统管理，里面包含对各种资源的调用，内存的管理，网络接口的调用等等，是各种资源管理的集合&lt;br&gt;&amp;emsp;&amp;emsp;线程：是操作系统的最小的调度单位，是一串指令的集合。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-队列与生产者消费者模式</title>
    <link href="http://yoursite.com/2018/10/26/python-%E9%98%9F%E5%88%97%E4%B8%8E%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/26/python-队列与生产者消费者模式/</id>
    <published>2018-10-26T01:47:08.000Z</published>
    <updated>2018-10-26T15:05:59.986Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。<br><a id="more"></a><br>1、为什么要使用生产者和消费者模式<br>&emsp;&emsp;在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。<br>2、什么是生产者消费者模式<br>&emsp;&emsp;生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>&emsp;&emsp;队列（Queue）:在多个线程之间安全的交换数据信息，队列在多线程编程中特别有用<br><strong>队列的好处：</strong></p><ul><li>提高双方的效率，你只需要把数据放到队列中，中间去干别的事情。</li><li>完成了程序的解耦性，两者关系依赖性没有不大。</li></ul><h2 id="队列的类型："><a href="#队列的类型：" class="headerlink" title="队列的类型："></a>队列的类型：</h2><ul><li>lass queue.Queue(maxsize=0) <strong>先进先出，后进后出</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()   # 生成先入先出队列实例</span><br><span class="line">q.put(1)            # 先放进1，再放入2</span><br><span class="line">q.put(2)</span><br><span class="line">print(q.get())  </span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li>class queue.LifoQueue(maxsize=0) <strong>先进后出，后进先出</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.LifoQueue()   # 生成先入先出队列实例</span><br><span class="line">q.put(1)            # 先放进1，再放入2</span><br><span class="line">q.put(2)</span><br><span class="line">print(q.get())  </span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li><li>class queue.PriorityQueue(maxsize=0)<br><strong>优先级来取数据。存放数据的格式 : Queue.put((priority_number,data))，priority_number越小，优先级越高，data代表存入的值</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.PriorityQueue()</span><br><span class="line">q.put((1, &quot;d1&quot;))</span><br><span class="line">q.put((-1, &quot;d2&quot;))</span><br><span class="line">q.put((6, &quot;d3&quot;))</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get()) </span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">(-1, &apos;d2&apos;)</span><br><span class="line">(1, &apos;d1&apos;)</span><br><span class="line">(6, &apos;d3&apos;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>maxsize代表这个队列最大能够put的长度，如果xsize &lt;= 0，则队列大小为无限大。</strong></p><h2 id="队列的内置方法"><a href="#队列的内置方法" class="headerlink" title="队列的内置方法"></a>队列的内置方法</h2><ul><li><p>exception queue.Empty<br><strong>队列中的数据为空时，就会抛出这个异常。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">q.get(block=False)   #获取不到的时候</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 161, in get</span><br><span class="line">    raise Empty</span><br><span class="line">queue.Empty</span><br></pre></td></tr></table></figure></li><li><p>exception queue.Full<br><strong>当队列中满了以后，再放数据的话，就会抛出此异常。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue(maxsize=1)  </span><br><span class="line">q.put(1)</span><br><span class="line">q.put(1,block=False)</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 184, in put_nowait</span><br><span class="line">    return self.put(item, block=False)</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 130, in put</span><br><span class="line">    raise Full</span><br><span class="line">queue.Full</span><br></pre></td></tr></table></figure></li><li><p>Queue.qsize()<br><strong>查看队列的大小。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()  </span><br><span class="line">q.put(20)</span><br><span class="line">q.put(21)</span><br><span class="line">print(q.qsize())   #查看队列的大小</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li><li><p>Queue.empty()<br><strong>队列如果为空返回True，不为空返回False。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()  </span><br><span class="line">q.put(1)</span><br><span class="line">print(q.empty())   #查看队列是否为空</span><br><span class="line">q.get()</span><br><span class="line">print(q.empty())   #查看队列是否为空</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>Queue.full()<br><strong>队列如果满了，返回True，没有满返回False。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue(maxsize=1)  </span><br><span class="line">q.put(1)</span><br><span class="line">print(q.full())   #查看队列是否满</span><br><span class="line">q.get()</span><br><span class="line">print(q.full())   #查看队列是否满</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>Queue.put(item,block=True,timeout=None)<br><strong>把数据插入队列中。block参数默认为true，timeout默认值是None。如果blcok为false的话，那么在put时候超过设定的maxsize的值，就会报full 异常。如果timeout设置值得话，说明put值得个数超过maxsize值，那么会在timeout几秒之后抛出full异常。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue(maxsize=1)  #是定队列的大小为1</span><br><span class="line">q.put(1)</span><br><span class="line">q.put(1,block=False)   #block不会阻塞，会full异常</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 130, in put</span><br><span class="line">    raise Full</span><br><span class="line">queue.Full</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue(maxsize=1)  #是定队列的大小为1</span><br><span class="line">q.put(1)</span><br><span class="line">q.put(1,timeout=1)    #超过1秒，则会报full异常</span><br><span class="line"></span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 130, in put</span><br><span class="line">    raise Full</span><br><span class="line">queue.Full</span><br></pre></td></tr></table></figure></li><li><p>Queue.put_nowait(item)<br><strong>等同于Queue.put(item,block=False)或者是Queue.put(item,False)。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue(maxsize=1)</span><br><span class="line">q.put(1)</span><br><span class="line">q.put_nowait(1)   #等同于q.put(1,block=False)</span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 184, in put_nowait</span><br><span class="line">    return self.put(item, block=False)</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 130, in put</span><br><span class="line">    raise Full</span><br><span class="line">queue.Full</span><br></pre></td></tr></table></figure></li><li><p>Queue.get(block=True,timeout=None)<br><strong>移除并返回队列中的序列。参数block=true并且timeout=None。如果block=false的话，那么队列为空的情况下，就直接Empty异常。如果timeout有实际的值，这个时候队列为空，执行get的时候，则时隔多长时间则报出Empty的异常。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">q.put(1)</span><br><span class="line">q.get()</span><br><span class="line">q.get(block=False)    #获取不到值，直接抛Empty异常</span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 161, in get</span><br><span class="line">    raise Empty</span><br><span class="line">queue.Empty</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">q.put(1)</span><br><span class="line">q.get()</span><br><span class="line">q.get(timeout=1)    #设置超时时间，抛出Empty异常</span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 172, in get</span><br><span class="line">    raise Empty</span><br><span class="line">queue.Empty</span><br></pre></td></tr></table></figure></li><li><p>Queue.get_nowait(item)<br><strong>等同于Queue.get(block=False)或者Queue.get(False)。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">q.put(1)</span><br><span class="line">q.get()</span><br><span class="line">q.get_nowait()   #等同于q.get(block=False)</span><br><span class="line">#输出</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 192, in get_nowait</span><br><span class="line">    return self.get(block=False)</span><br><span class="line">  File &quot;D:\Python\Python35\lib\queue.py&quot;, line 161, in get</span><br><span class="line">    raise Empty</span><br><span class="line">queue.Empty</span><br></pre></td></tr></table></figure></li><li><p>Queue.task_done()<br><strong>get()用于获取任务，task_done()则是用来告诉队列之前获取的任务已经处理完成</strong></p></li><li><p>Queue.join()<br><strong>block(阻塞)直到queue（队列）被消费完毕,如果生产者生产10个包子，那么要等消费者把这个10个包子全部消费完毕，生产者才能继续往下执行。</strong></p></li></ul><p><strong>task_done和jion的理解</strong></p><h2 id="生成者消费者模型例子"><a href="#生成者消费者模型例子" class="headerlink" title="生成者消费者模型例子"></a>生成者消费者模型例子</h2><h3 id="生产者生产完毕，消费者再消费例子："><a href="#生产者生产完毕，消费者再消费例子：" class="headerlink" title="生产者生产完毕，消费者再消费例子："></a>生产者生产完毕，消费者再消费例子：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import queue</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def producer():</span><br><span class="line">    for i in range(10):</span><br><span class="line">        q.put(&quot;骨头 %s&quot; % i)</span><br><span class="line"> </span><br><span class="line">    print(&quot;开始等待所有的骨头被取走...&quot;)</span><br><span class="line">    q.join()  # 等待这个骨头队列被消费完毕</span><br><span class="line">    print(&quot;所有的骨头被取完了...&quot;)</span><br><span class="line"></span><br><span class="line">def consumer(n):</span><br><span class="line">    while q.qsize() &gt; 0:</span><br><span class="line">        print(&quot;%s 取到&quot; % n, q.get())</span><br><span class="line">        q.task_done()  # 每去到一个骨头，便告知队列这个任务执行完了</span><br><span class="line"> </span><br><span class="line">q = queue.Queue()</span><br><span class="line"> </span><br><span class="line">p = threading.Thread(target=producer,)</span><br><span class="line">p.start()</span><br><span class="line"> </span><br><span class="line">c1 = consumer(&quot;QQ&quot;)</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/python-队列/20181026091046063.png" alt=""></p><h3 id="边生产边消费的模型例子"><a href="#边生产边消费的模型例子" class="headerlink" title="边生产边消费的模型例子"></a>边生产边消费的模型例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import time,random</span><br><span class="line">import queue,threading</span><br><span class="line">q = queue.Queue()</span><br><span class="line"> </span><br><span class="line">def producer(name):</span><br><span class="line">  count = 0</span><br><span class="line"> </span><br><span class="line">  while count &lt; 10:</span><br><span class="line">    time.sleep(random.randrange(3))</span><br><span class="line">    q.put(count)  # 在队列里放包子</span><br><span class="line">    print&apos;Producer %s has produced %s baozi..&apos; (% (name, count))</span><br><span class="line">    count += 1</span><br><span class="line"> </span><br><span class="line">def consumer(name):</span><br><span class="line">  count = 0</span><br><span class="line">  while count &lt; 10:</span><br><span class="line">    time.sleep(random.randrange(4))</span><br><span class="line">    if not q.empty():  # 如果还有包子</span><br><span class="line">        data = q.get()  # 就继续获取保证</span><br><span class="line">        print(data)</span><br><span class="line">        print(&apos;Consumer %s has eat %s baozi...&apos; % (name, data))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;-----no baozi anymore----&quot;)</span><br><span class="line">    count += 1</span><br><span class="line"> </span><br><span class="line">p1 = threading.Thread(target=producer, args=(&apos;A&apos;,))</span><br><span class="line">c1 = threading.Thread(target=consumer, args=(&apos;B&apos;,))</span><br><span class="line">p1.start()</span><br><span class="line">c1.start()</span><br></pre></td></tr></table></figure><p><img src="http://qiniu.rearib.top/python-队列/20181026091459130.png" alt=""><br>流程图:<br><img src="http://qiniu.rearib.top/python-队列/20181026091531607.png" alt=""></p><ul><li>生产者生产，消费者消费。</li><li>消费者每消费一次，都要去执行以下task_done()方法，来告诉消费者已经消费成功，相当于吃完饭，消费者应该给钱了。</li><li>消费者每消费一次，则队列中计数器会做减1操作。</li><li>当队列中的计数器为0的时候，则生产者不阻塞，继续执行，不为0的时候，则阻塞，直到消费者消费完毕为止。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;并发编程中使用生产者和消费者模式能够解决绝大多数并发问题。该模式通过平衡生产线程和消费线程的工作能力来提高程序的整体处理数据的速度。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django-Oauth2.0协议探究</title>
    <link href="http://yoursite.com/2018/10/10/django-Oauth2.0%E5%8D%8F%E8%AE%AE%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/10/10/django-Oauth2.0协议探究/</id>
    <published>2018-10-10T11:46:43.000Z</published>
    <updated>2018-11-13T09:09:26.303Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;对</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;对&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="Oauth2.0" scheme="http://yoursite.com/tags/Oauth2-0/"/>
    
  </entry>
  
  <entry>
    <title>django-url路由</title>
    <link href="http://yoursite.com/2018/10/04/django-url%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2018/10/04/django-url路由/</id>
    <published>2018-10-04T14:46:43.000Z</published>
    <updated>2018-12-07T02:52:19.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="url梳理与难点剖析"><a href="#url梳理与难点剖析" class="headerlink" title="url梳理与难点剖析"></a>url梳理与难点剖析</h2><h3 id="app-name-应用命名空间-和-namespace-实例命名空间-的区别"><a href="#app-name-应用命名空间-和-namespace-实例命名空间-的区别" class="headerlink" title="app_name (应用命名空间) 和 namespace (实例命名空间) 的区别"></a>app_name (应用命名空间) 和 namespace (实例命名空间) 的区别</h3><ul><li><a href="http://www.liujiangblog.com/course/django/136" target="_blank" rel="noopener">刘江的个人博客</a></li><li><a href="https://www.jianshu.com/p/404500a0408a" target="_blank" rel="noopener">app_name (应用命名空间) 和 namespace (实例命名空间) 的区别</a></li></ul><p>没有理解 <a href="http://www.liujiangblog.com/course/django/136" target="_blank" rel="noopener">命名空间</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;url梳理与难点剖析&quot;&gt;&lt;a href=&quot;#url梳理与难点剖析&quot; class=&quot;headerlink&quot; title=&quot;url梳理与难点剖析&quot;&gt;&lt;/a&gt;url梳理与难点剖析&lt;/h2&gt;&lt;h3 id=&quot;app-name-应用命名空间-和-namespace-实例命名空
      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django-中间件MiddleWare探究</title>
    <link href="http://yoursite.com/2018/10/04/django-%E4%B8%AD%E9%97%B4%E4%BB%B6MiddleWare%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/10/04/django-中间件MiddleWare探究/</id>
    <published>2018-10-04T14:46:43.000Z</published>
    <updated>2018-12-07T06:17:58.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h2><p>&emsp;&emsp;中间件是一个用来处理Django的请求和响应的框架级别的钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。每个中间件组件都负责做一些特定的功能。<strong>但是由于其影响的是全局，所以需要谨慎使用，使用不当会影响性能。</strong><br><a id="more"></a></p><h3 id="中间件配置"><a href="#中间件配置" class="headerlink" title="中间件配置"></a>中间件配置</h3><p>&emsp;&emsp;在django项目的settings模块中，有一个 MIDDLEWARE 变量，其中每一个元素就是一个中间件。<br><img src="http://qiniu.rearib.top/20181807/1124-a.png" alt=""></p><h3 id="中间件方法和执行顺序"><a href="#中间件方法和执行顺序" class="headerlink" title="中间件方法和执行顺序"></a>中间件方法和执行顺序</h3><p>&emsp;&emsp;对于中间件，可以定义下面五种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process_request(self,request)</span><br><span class="line">process_view(self, request, callback, callback_args, callback_kwargs)</span><br><span class="line">process_template_response(self,request,response)</span><br><span class="line">process_exception(self, request, exception)</span><br><span class="line">process_response(self, request, response)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;以上方法的返回值可以是None或一个HttpResponse对象，如果是None，则继续按照django定义的规则向后继续执行，如果是HttpResponse对象，则直接将该对象返回给用户。</p><blockquote><p>process_request</p></blockquote><p>&emsp;&emsp;process_request有一个参数，就是request，这个request和视图函数中的request是一样的。<br>&emsp;&emsp;它的返回值可以是None也可以是HttpResponse对象。返回值是None的话，按正常流程继续走，交给下一个中间件处理，如果是HttpResponse对象，Django将不执行视图函数，而将相应对象返回给浏览器。</p><ul><li>中间件的process_request方法是在执行视图函数之前执行的。</li><li>当配置多个中间件时，会按照MIDDLEWARE中的注册顺序，也就是列表的索引值，从前到后依次执行的。</li><li><strong>不同中间件之间传递的request都是同一个对象</strong></li></ul><blockquote><p>process_view</p></blockquote><p><code>process_view(self, request, view_func, view_args, view_kwargs)</code></p><ol><li>request是HttpRequest对象。</li><li>view_func是Django即将使用的视图函数。 （它是实际的函数对象，而不是函数的名称作为字符串。）</li><li>view_args是将传递给视图的位置参数的列表.</li><li>view_kwargs是将传递给视图的关键字参数的字典。 view_args和view_kwargs都不包含第一个视图参数（request）。</li></ol><ul><li>Django会在调用视图函数之前调用process_view方法。</li></ul><p>&emsp;&emsp;它应该返回None或一个HttpResponse对象。 如果返回None，Django将继续处理这个请求，执行任何其他中间件的process_view方法，然后在执行相应的视图。 如果它返回一个HttpResponse对象，Django不会调用适当的视图函数。 它将执行中间件的process_response方法并将应用到该HttpResponse并返回结果。</p><blockquote><p>process_exception</p></blockquote><p><code>process_exception(self, request, exception)</code></p><ol><li>request是HttpRequest对象。</li><li>exception是视图函数异常产生的Exception对象。</li></ol><ul><li>如果视图函数中无异常，process_exception方法不执行。</li></ul><p>&emsp;&emsp;这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象。如果是HttpResponse对象，Django将调用模板和中间件中的process_response方法，并返回给浏览器，否则将默认处理异常。如果返回一个None，则交给下一个中间件的process_exception方法来处理异常。它的执行顺序也是按照中间件注册顺序的倒序执行。</p><blockquote><p>process_template_response（用的比较少）</p></blockquote><p><code>process_template_response(self, request, response)</code></p><ol><li>request是HttpRequest对象。</li><li>response是TemplateResponse对象（由视图函数或者中间件产生）。</li></ol><p>&emsp;&emsp;process_template_response是在视图函数执行完成后立即执行，但是它有一个前提条件，那就是视图函数返回的对象有一个render()方法（或者表明该对象是一个TemplateResponse对象或等价方法）</p><blockquote><p>process_response</p></blockquote><p>&emsp;&emsp;它有两个参数，一个是request，一个是response，request就是上述例子中一样的对象，response是视图函数返回的HttpResponse对象。该方法的返回值也必须是HttpResponse对象。</p><ul><li>多个中间件中的process_response方法是按照MIDDLEWARE中的注册顺序倒序执行的，也就是说第一个中间件的process_request方法首先执行，而它的process_response方法最后执行，最后一个中间件的process_request方法最后一个执行，它的process_response方法是最先执行。</li></ul><h3 id="中间件的执行流程图"><a href="#中间件的执行流程图" class="headerlink" title="中间件的执行流程图"></a>中间件的执行流程图</h3><p>&emsp;&emsp;请求到达中间件之后，先按照正序执行每个注册中间件的process_request方法，process_request方法返回的值是None，就依次执行，如果返回的值是HttpResponse对象，不再执行后面的process_request方法，而是执行当前对应中间件的process_response方法，将HttpResponse对象返回给浏览器。也就是说：如果MIDDLEWARE中注册了6个中间件，执行过程中，第3个中间件返回了一个HttpResponse对象，那么第4,5,6中间件的process_request和process_response方法都不执行，顺序执行3,2,1中间件的process_response方法。<br>&emsp;&emsp;process_request方法都执行完后，匹配路由，找到要执行的视图函数，先不执行视图函数，先执行中间件中的process_view方法，process_view方法返回None，继续按顺序执行，所有process_view方法执行完后执行视图函数。加入中间件3 的process_view方法返回了HttpResponse对象，则4,5,6的process_view以及视图函数都不执行，直接从最后一个中间件，也就是中间件6的process_response方法开始倒序执行。<br>process_template_response和process_exception两个方法的触发是有条件的，执行顺序也是倒序。总结所有的执行流程如下：<br><img src="http://qiniu.rearib.top/20181807/1150-n.png" alt=""><br><img src="http://qiniu.rearib.top/20181807/1152-F.png" alt=""><br>&emsp;&emsp;<strong>在执行完RequestMiddlewares后先到urls.py然后再执行ViewMiddlewares中间件</strong></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>&emsp;&emsp;在前面我们探究过web框架的本质，在实例化一个WSGIHander对象的时候，在<code>__init__()</code>中通过<code>self.load_middleware()</code>会加载setting中设置的中间件。<br>&emsp;&emsp;从<code>settings</code>配置文件读取设置的<code>middleware</code>，然后初始化<code>WSGIHandler</code>类中的各个<code>middleware</code>的相关变量，这些变量主要包括<code>self._request_middleware</code>，<code>self._view_middleware</code>，<code>self._template_response_middleware</code>，<code>self._response_middleware</code>，<code>self._exception_middleware</code>，均为存放中间件方法的列表。</p><h2 id="中间件的应用"><a href="#中间件的应用" class="headerlink" title="中间件的应用"></a>中间件的应用</h2><p>&emsp;&emsp;由于中间件工作在视图函数执行前、执行后（像不像所有视图函数的装饰器！）适合所有的请求/一部分请求做批量处理。</p><ul><li>做IP限制：<br>  放在 中间件类的列表中，阻止某些IP访问；</li><li>URL访问过滤<ol><li>如果用户访问的是login视图（放过）</li><li>如果访问其他视图（需要检测是不是有session已经有了放行，没有返回login），这样就省得在多个视图函数上写装饰器了！</li></ol></li><li>缓存<br>  客户端请求来了，中间件去缓存看看有没有数据，有直接返回给用户，没有再去逻辑层执行视图函数</li></ul><p>参考文章:</p><ul><li><a href="https://www.jianshu.com/p/1ff05dfb3d0d" target="_blank" rel="noopener">django源码分析之请求响应流程</a></li><li><a href="https://www.jianshu.com/p/eacea630e078" target="_blank" rel="noopener">Django 中间件原理及源码分析</a></li><li><a href="https://blog.csdn.net/miaoqinian/article/details/80816474" target="_blank" rel="noopener">Django 中间件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是中间件&quot;&gt;&lt;a href=&quot;#什么是中间件&quot; class=&quot;headerlink&quot; title=&quot;什么是中间件&quot;&gt;&lt;/a&gt;什么是中间件&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;中间件是一个用来处理Django的请求和响应的框架级别的钩子。它是一个轻量、低级别的插件系统，用于在全局范围内改变Django的输入和输出。每个中间件组件都负责做一些特定的功能。&lt;strong&gt;但是由于其影响的是全局，所以需要谨慎使用，使用不当会影响性能。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django-model模型知识点总结</title>
    <link href="http://yoursite.com/2018/10/02/django-model%E6%A8%A1%E5%9E%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/02/django-model模型知识点总结/</id>
    <published>2018-10-02T14:46:43.000Z</published>
    <updated>2018-12-05T06:07:25.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="model梳理与难点剖析"><a href="#model梳理与难点剖析" class="headerlink" title="model梳理与难点剖析"></a>model梳理与难点剖析</h2><h3 id="Python操作数据库"><a href="#Python操作数据库" class="headerlink" title="Python操作数据库"></a>Python操作数据库</h3><p>&emsp;&emsp;用Python语法来写，然后使用一个中间工具将Python代码翻译成原生的SQL语句，这个中间工具就是所谓的ORM（对象关系映射）！ORM将一个Python的对象映射为数据库中的一张关系表。它将SQL封装起来，程序员不再需要关心数据库的具体操作，只需要专注于自己本身代码和业务逻辑的实现。于是，整体的实现过程就是：Python代码，通过ORM转换成SQL语句，再通过pymysql去实际操作数据库。<br>&emsp;&emsp;最典型的ORM就是<a href="www.sqlalchemy.org">SQLAlchemy</a>了，但是Django自带ORM系统，不需要额外安装别的ORM。</p><h3 id="字段选项和字段类型"><a href="#字段选项和字段类型" class="headerlink" title="字段选项和字段类型"></a>字段选项和字段类型</h3><blockquote><p>阅读文章 </p></blockquote><ul><li><a href="https://yiyibooks.cn/xx/Django_1.11.6/ref/models/fields.html" target="_blank" rel="noopener">官方文档</a></li><li><a href="http://www.liujiangblog.com/course/django/94" target="_blank" rel="noopener">刘江的个人博客</a></li></ul><blockquote><p>null和Black的区别:</p></blockquote><p>&emsp;&emsp;如果null为True，Django将在数据库中将空值存储为NUL，blank=True，表单验证时将允许输入空值，null 纯粹是数据库范畴的概念，而blank 是数据验证范畴的。</p><blockquote><p>自增字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = models.AutoField(primary_key=True)</span><br></pre></td></tr></table></figure><blockquote><p>auto_now_add和auto_add</p></blockquote><ul><li>auto_now:每当对象被保存时将字段设为当前日期，常用于保存最后修改时间。</li><li>auto_now_add：每当对象被创建时，设为当前日期，常用于保存创建日期(注意，它是不可修改的)。</li></ul><blockquote><p>db_column字段列名称</p></blockquote><p>&emsp;&emsp;数据库中用db_column来表示该字段的列名称。 如果未指定，那么Django将会使用字段名作为列名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = models.AutoField(max_length=11,db_column=&apos;UID&apos;,primary_key=True)</span><br></pre></td></tr></table></figure></p><blockquote><p>unique_for_date</p></blockquote><p>&emsp;&emsp;如果你有一个title 字段设置unique_for_date=”pub_date”，那么Django 将不允许两个记录具有相同的title 和pub_date。unique_for_month类似unique_for_date，只是要求字段对于月份是唯一的。</p><blockquote><p>upload_to</p></blockquote><p>&emsp;&emsp;用于设置上传地址的目录和文件名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MyModel(models.Model):</span><br><span class="line">    # 文件被传至`MEDIA_ROOT/uploads`目录，MEDIA_ROOT由你在settings文件中设置</span><br><span class="line">    upload = models.FileField(upload_to=&apos;uploads/&apos;)</span><br><span class="line">    # 或者</span><br><span class="line">    # 被传到`MEDIA_ROOT/uploads/2015/01/30`目录，增加了一个时间划分</span><br><span class="line">    upload = models.FileField(upload_to=&apos;uploads/%Y/%m/%d/&apos;)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;也可以接收回调函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def user_directory_path(instance, filename):</span><br><span class="line">    #文件上传到MEDIA_ROOT/user_&lt;id&gt;/&lt;filename&gt;目录中</span><br><span class="line">    return &apos;user_&#123;0&#125;/&#123;1&#125;&apos;.format(instance.user.id, filename)</span><br><span class="line"></span><br><span class="line">class MyModel(models.Model):</span><br><span class="line">    upload = models.FileField(upload_to=user_directory_path)</span><br></pre></td></tr></table></figure></p><blockquote><p>评论系统的外键</p></blockquote><p>&emsp;&emsp;什么时候需要自己引用自己的外键呢？典型的例子就是评论系统！一条评论可以被很多人继续评论:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent_comment = models.ForeignKey(&apos;self&apos;, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure></p><blockquote><p>choice</p></blockquote><p>&emsp;&emsp;在choices中，每个元组中的第一个元素，是存储在数据库中的值；第二个元素是使人容易理解的描述。给定一个模型实例，可以使用get_FOO_display()方法来访问选项字段的显示值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">YEAR_IN_SCHOOL_CHOICES = (</span><br><span class="line">    (&apos;FR&apos;, &apos;Freshman&apos;),</span><br><span class="line">    (&apos;SO&apos;, &apos;Sophomore&apos;),</span><br><span class="line">    (&apos;JR&apos;, &apos;Junior&apos;),</span><br><span class="line">    (&apos;SR&apos;, &apos;Senior&apos;),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><blockquote><p>related_name和related_query_name的使用：<a href="https://yiyibooks.cn/xx/Django_1.11.6/topics/db/models.html#abstract-related-name" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>&emsp;&emsp;假如有下面两个模型:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person(models.Model);</span><br><span class="line">    name = models.CharField(verbose_name=&apos;作者姓名&apos;, max_length=10)</span><br><span class="line">    age = models.IntegerField(verbose_name=&apos;作者年龄&apos;)</span><br><span class="line"></span><br><span class="line">class Book(models.Model):</span><br><span class="line">    person = models.ForeignKey(Person, related_name=&apos;person_book&apos;)</span><br><span class="line">    title = models.CharField(verbose_name=&apos;书籍名称&apos;, max_length=10)</span><br><span class="line">    pubtime = models.DateField(verbose_name=&apos;出版时间&apos;)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果我们要查询一个作者出版了哪些书籍的话,先查询到作者的信息,<code>person = Person.objects.fiter(你的条件)</code>,返回一个person对象,然后反向查询:<code>book = person.book_set.all()</code>,但是如果定义了<code>related_name</code>,就可以使用<code>person.person_books.all()</code>。</p><blockquote><p>关联关系字段</p></blockquote><ul><li><p>on_delete设置</p><p>&emsp;&emsp;ForeignKey.on_delete：当删除由ForeignKey引用的对象时，Django将模拟由on_delete参数指定的SQL约束的行为。</p><ul><li>through和through_fields的作用</li></ul><p>&emsp;&emsp;ManyToMany时会自动创建第三张表用于管理多对多关系，如果想在第三张表添加额外字段，可以使用through：<a href="http://www.cnblogs.com/linyuhong/p/9640078.html" target="_blank" rel="noopener">参考链接</a><br>&emsp;&emsp;当中间模型具有多个外键指向多对多关联关系模型中的任何一个（或两个），你必须指定through_fields：<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/fields.html#manytomanyfield" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Person(models.Model):</span><br><span class="line">    name = models.CharField(max_length=50)</span><br><span class="line"></span><br><span class="line">class Group(models.Model):</span><br><span class="line">    name = models.CharField(max_length=128)</span><br><span class="line">    members = models.ManyToManyField(</span><br><span class="line">        Person,</span><br><span class="line">        through=&apos;Membership&apos;,</span><br><span class="line">        through_fields=(&apos;group&apos;, &apos;person&apos;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">class Membership(models.Model):</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    //邀请者</span><br><span class="line">    inviter = models.ForeignKey(</span><br><span class="line">        Person,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=&quot;membership_invites&quot;,</span><br><span class="line">    )</span><br><span class="line">    invite_reason = models.CharField(max_length=64)</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;Membership有两个 foreign keys指向 Person (person and inviter), 这样会导致关系不清晰，Django不知道使用哪一个外键。 在这种情况下，你必须使用through_fields 明确指定Django 应该使用哪些外键，就像上面例子一样。<br>&emsp;&emsp;<strong>通俗的说，就是through_fields参数指定从中间表模型Membership中选择哪两个字段，作为关系连接字段。</strong></p><blockquote><p>模型的Meta选项</p></blockquote><ul><li><a href="https://yiyibooks.cn/xx/Django_1.11.6/ref/models/options.html" target="_blank" rel="noopener">官方文档</a></li><li>abstract = True：就表示模型是抽象基类，抽象模型本身不实际生成数据库表。</li><li>verbose_name = “pizza”：对象的一个易于理解的名称</li><li>unique_together = (“driver”, “restaurant”)：用来设置的不重复的字段组合,当unique_together的约束被违反时，模型校验期间会抛出ValidationError异常。</li><li>ordering = [‘-order_date’]：对象默认的顺序</li></ul><blockquote><p>model的Manager示例</p></blockquote><p>&emsp;&emsp;每个非抽象的Model 类必须给自己添加一个Manager实例。 Django 确保在你的模型类中至少有一个默认的Manager。 如果你没有添加自己的管理器，Django将添加一个属性objects。<br>&emsp;&emsp;<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/topics/db/managers.html#custom-managers" target="_blank" rel="noopener">自定义管理器</a></p><blockquote><p>验证对象 <a href="https://yiyibooks.cn/xx/Django_1.11.6/ref/models/instances.html#validating-objects" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>&emsp;&emsp;验证一个模型涉及三个步骤：</p><ul><li>验证模型的字段 —— Model.clean_fields()</li><li>验证模型的完整性 —— Model.clean()</li><li>验证模型的唯一性 —— Model.validate_unique()</li></ul><p>&emsp;&emsp;当你调用模型的full_clean() 方法时，这三个方法都将执行。</p><blockquote><p>信号</p></blockquote><ol><li>发出预先保存的信号。 发送pre_save信号，允许监听该信号的任何函数执行某些操作。</li><li>预处理数据。 调用每个字段的pre_save()方法来执行所需的任何自动数据修改。 例如，日期/时间字段覆盖pre_save()来实现auto_now_add和auto_now。</li><li>准备数据库的数据。 要求每个字段的get_db_prep_save()方法将其当前值提供给可写入数据库的数据类型。大多数字段不需要数据准备。 简单的数据类型，例如整数和字符串，是可以直接写入的Python 对象。 但是，复杂的数据类型通常需要一些改动。例如，DateField 字段使用Python 的 datetime 对象来保存数据。 数据库保存的不是datetime 对象，所以该字段的值必须转换成ISO兼容的日期字符串才能插入到数据库中。</li><li>将数据插入数据库。 预处理的准备数据组成一个用于插入数据库的SQL语句。</li><li>发出一个保存后的信号。 发送post_save信号，允许监听该信号的任何函数执行某些操作。</li></ol><blockquote><p>现有字段更新</p></blockquote><p>&emsp;&emsp;有时候你需要在一个字段上执行简单的算法操作，例如增加或者减少当前值。 实现这点的简单方法是像下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; product = Product.objects.get(name=&apos;Venezuelan Beaver Cheese&apos;)</span><br><span class="line">&gt;&gt;&gt; product.number_sold += 1</span><br><span class="line">&gt;&gt;&gt; product.save()</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果从数据库中读取的旧的number_sold 值为10，那么写回到数据库中的值将为11。<br>&emsp;&emsp;通过将更新基于原始字段的值而不是显式赋予一个新值，这个过程可以避免竞态条件而且更快。 Django提供F表达式用于这种类型的相对更新。 利用F表达式，前面的示例可以表示成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.db.models import F</span><br><span class="line">&gt;&gt;&gt; product = Product.objects.get(name=&apos;Venezuelan Beaver Cheese&apos;)</span><br><span class="line">&gt;&gt;&gt; product.number_sold = F(&apos;number_sold&apos;) + 1</span><br><span class="line">&gt;&gt;&gt; product.save()</span><br></pre></td></tr></table></figure></p><blockquote><p>指定要保存的字段</p></blockquote><p>&emsp;&emsp;如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">product.name = &apos;Name changed again&apos;</span><br><span class="line">product.save(update_fields=[&apos;name&apos;])</span><br></pre></td></tr></table></figure></p><blockquote><p>实例方法</p></blockquote><ul><li>__str__() 方法返回模型的一个友好的、人类可读的形式。</li><li>get_absolute_url() 方法告诉Django 如何计算对象的标准URL。</li><li>get_FOO_display():对于每个具有choices 的字段，每个对象将具有一个get_FOO_display() 方法，其中FOO 为该字段的名称。 这个方法返回该字段对“人类可读”的值。</li></ul><blockquote><p>QuerySet</p></blockquote><ul><li>QuerySet何时求值<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/querysets.html#when-querysets-are-evaluated" target="_blank" rel="noopener">官方文档</a></li><li>返回新的QuerySet的方法<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/querysets.html#methods-that-return-new-querysets" target="_blank" rel="noopener">官方文档</a></li><li>不返回QuerySet的方法<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/querysets.html#methods-that-do-not-return-querysets" target="_blank" rel="noopener">官方文档</a></li><li><p>聚合函数<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/querysets.html#aggregation-functions" target="_blank" rel="noopener">官方文档</a></p></li><li><p>exists()方法</p></li></ul><p>&emsp;&emsp;如果你需要知道是否存在至少一条记录（而不需要真实的对象），使用 exists() 将更加高效。</p><ul><li>aggregate和annotate</li></ul><p>&emsp;&emsp;博客：<a href="https://blog.csdn.net/AyoCross/article/details/68951413" target="_blank" rel="noopener">django中聚合aggregate和annotate GROUP BY的使用方法</a><br>&emsp;&emsp;官方文档：<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/expressions.html#aggregate-expressions" target="_blank" rel="noopener">Aggregate()表达式</a><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/querysets.html#annotate" target="_blank" rel="noopener">annotate表达式</a></p><ul><li>order_by方法</li></ul><p>&emsp;&emsp; 升序是隐含的。 要随机订购，请使用”?”。</p><ul><li><p>values方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog.objects.filter(name__startswith=&apos;Beatles&apos;).values()</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;返回一个返回字典的QuerySet，而不是使用模型实例作为一个迭代。每个字典表示一个对象，键对应于模型对象的属性名称。</p><ul><li>value_list()方法</li></ul><p>&emsp;&emsp;与values() 类似，只是在迭代时返回的是元组而不是字典。</p><blockquote><p>Django的Q对象和F对象</p></blockquote><p>&emsp;&emsp;博客：<a href="https://blog.csdn.net/qq_33733970/article/details/78403455?locationNum=3&amp;fps=1" target="_blank" rel="noopener">Python3之Django Web框架F对象，Q对象</a><br>&emsp;&emsp;官方文档：<a href="https://yiyibooks.cn/__trs__/xx/Django_1.11.6/ref/models/expressions.html#f-expressions" target="_blank" rel="noopener">F()表达式</a></p><blockquote><p>抽象模型</p></blockquote><ul><li><a href="http://www.liujiangblog.com/course/django/100" target="_blank" rel="noopener">刘江的个人博客</a></li><li>多表继承(默认隐含一个OneToOneField来链接子类与父类)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Place(models.Model):</span><br><span class="line">    name = models.CharField(max_length=50)</span><br><span class="line">    address = models.CharField(max_length=80)</span><br><span class="line"></span><br><span class="line">class Restaurant(Place):</span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=False)</span><br><span class="line">    serves_pizza = models.BooleanField(default=False)</span><br></pre></td></tr></table></figure></li></ul><p>Restaurant可以看做是Place的扩展,所以调用只能:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; p = Place.objects.get(id=12)</span><br><span class="line"># 如果p也是一个Restaurant对象，那么下面的调用可以获得该Restaurant对象。</span><br><span class="line">&gt;&gt;&gt; p.restaurant</span><br><span class="line">&lt;Restaurant: ...&gt;</span><br></pre></td></tr></table></figure></p><p><strong>在多表继承的情况下，由于父类和子类都在数据库内有物理存在的表，父类的Meta类会对子类造成不确定的影响，因此，Django在这种情况下关闭了子类继承父类的Meta功能。这一点和抽象基类的继承方式有所不同。</strong></p><ul><li>代理模型<br>&emsp;&emsp;只需要将Meta中proxy的值设为True。<br>&emsp;&emsp;可以在代理模型中改变默认的排序方式和默认的manager管理器等等，而不会对原始模型产生影响。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Person(models.Model):</span><br><span class="line">    first_name = models.CharField(max_length=30)</span><br><span class="line">    last_name = models.CharField(max_length=30)</span><br><span class="line"></span><br><span class="line">class MyPerson(Person):</span><br><span class="line">    class Meta:</span><br><span class="line">        proxy = True</span><br><span class="line"></span><br><span class="line">    def do_something(self):</span><br><span class="line">        # ...</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>字段查询</p></blockquote><p>&emsp;&emsp;字段查询其实就是filter()、exclude()和get()等方法的关键字参数。 其基本格式是：field__lookuptype=value，注意其中是双下划线。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;model梳理与难点剖析&quot;&gt;&lt;a href=&quot;#model梳理与难点剖析&quot; class=&quot;headerlink&quot; title=&quot;model梳理与难点剖析&quot;&gt;&lt;/a&gt;model梳理与难点剖析&lt;/h2&gt;&lt;h3 id=&quot;Python操作数据库&quot;&gt;&lt;a href=&quot;#Py
      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django-Web框架本质探究</title>
    <link href="http://yoursite.com/2018/10/01/django-Web%E6%A1%86%E6%9E%B6%E6%9C%AC%E8%B4%A8%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2018/10/01/django-Web框架本质探究/</id>
    <published>2018-10-01T14:46:43.000Z</published>
    <updated>2018-12-04T06:37:10.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web框架本质"><a href="#Web框架本质" class="headerlink" title="Web框架本质"></a>Web框架本质</h2><p>&emsp;&emsp;对于所有的Web应用，本质上其实就是一个socket服务端，用户的浏览器其实就是一个socket客户端。对于真实开发中的python web程序来说，一般会分为两部分：<strong>服务器程序</strong>和<strong>应用程序</strong>。服务器程序负责对socket服务器进行封装，并在请求到来时，对请求的各种数据进行整理。应用程序则负责具体的逻辑处理。<br><a id="more"></a><br>&emsp;&emsp;为了方便应用程序的开发,就会出现许多的Web框架,而所有的web框架都需要与服务器程序配合才能为用户服务，所以web框架和web服务器之间需要标准化。</p><h2 id="一般Web框架架构"><a href="#一般Web框架架构" class="headerlink" title="一般Web框架架构"></a>一般Web框架架构</h2><p><img src="http://qiniu.rearib.top/20181804/1421-S.png" alt=""><br>&emsp;&emsp;大多数基于Python的web框架，如Django、tornado、flask、webpy都是在这个范围内进行增删裁剪的。例如Tornado用的是自己的异步非阻塞“WSGI”网关接口，Flask则只提供了最精简和基本的框架，Django则是直接使用了现成的WSGI，并实现了大部分功能，提供了大量的应用工具。</p><blockquote><p>MTV设计模式</p></blockquote><p><img src="http://qiniu.rearib.top/20181804/1436-C.png" alt=""></p><h3 id="WSGI-uwsgi-uWSGI区别"><a href="#WSGI-uwsgi-uWSGI区别" class="headerlink" title="WSGI-uwsgi-uWSGI区别"></a>WSGI-uwsgi-uWSGI区别</h3><p>&emsp;&emsp;<strong>WSGI</strong>：全称是Web Server Gateway Interface，WSGI不是服务器、python模块、框架、API或者任何软件，只是一种<strong>网关接口</strong>，它是一个Web服务器（如nginx，uWSGI等服务器）与web应用（如用Django框架写的程序）通信的一种规范。<br>&emsp;&emsp;<strong>uwsgi</strong>：一种传输协议，常用于在uWSGI服务器与其他网络服务器的数据通信。<br>&emsp;&emsp;<strong>uWSGI</strong>：是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等。<br><img src="http://qiniu.rearib.top/20181830/0933-9.png" alt=""><br><strong>工作流程:</strong></p><ol><li>首先客户端请求服务资源。</li><li>nginx作为直接对外的服务接口,接收到客户端发送过来的http请求,会解包、分析。</li></ol><ul><li>如果是静态文件请求就根据nginx配置的静态文件目录，返回请求的资源。</li><li>如果是动态的请求,nginx就通过配置文件,将请求传递给uWSGI。</li></ul><ol><li>uWSGI将接收到的包进行处理，转发给wsgi。</li><li>wsgi根据请求调用django工程的某个文件或函数，处理完后django将返回值交给wsgi。</li><li>wsgi将返回值进行打包，转发给uWSGI。</li><li>uWSGI接收后转发给nginx,nginx最终将返回值返回给客户端(如浏览器)。</li></ol><p>&emsp;&emsp;第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程，但是要考虑到某些情况：</p><ul><li>安全问题：程序不能直接被浏览器访问到，而是通过nginx。nginx只开放某个接口，这样运维人员在nginx上加上安全性的限制，可以达到保护程序的作用。</li><li>负载均衡问题：一个uwsgi很可能不够用，有了nginx做代理，一个nginx可以代理多台uwsgi完成uwsgi的负载均衡。</li><li>静态文件问题：用django或是uwsgi这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如nginx好，所以整个静态文件的处理都直接由nginx完成，静态文件的访问完全不去经过uwsgi以及其后面的东西。</li></ul><h3 id="通过对Django的启动研究socket的启动"><a href="#通过对Django的启动研究socket的启动" class="headerlink" title="通过对Django的启动研究socket的启动"></a>通过对Django的启动研究socket的启动</h3><p>&emsp;&emsp;<strong>使用runserver是启动Django自带的WSGI服务器</strong>，常用于开发调试，分析Django的源码:</p><ul><li>执行<code>python manage.py runserver 127.0.0.1:8000</code>后，会在<code>\Django1.11.6\Lib\site-packages\django\core\management\__init__.py</code>中执行<code>self.fetch_command(subcommand).run_from_argv(self.argv)</code>。</li><li>调用<code>fetch_command</code>返回的<code>runserver</code>模块下的<code>Command</code>对象，其中Command对象是<code>&lt;django.contrib.staticfiles.management.commands.runserver.Command object&gt;</code>，继续调用<code>Command</code>对象的<code>run_from_argv</code>方法，然后执行<code>self.handle(*args, **options)</code>调用<code>Command</code>下的<code>handle</code>。</li><li><p>从<code>Command.handle</code>–&gt;<code>Command.run</code>–&gt;<code>Command.inner_run</code>，并在inner_run中执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handler = self.get_handler(*args, **options)</span><br><span class="line">run(self.addr, int(self.port), handler,</span><br><span class="line">    ipv6=self.use_ipv6, threading=threading, server_cls=self.server_cls)</span><br></pre></td></tr></table></figure></li><li><p>在<code>get_handler</code>中会在通过<code>wsgi.py</code>返回<code>WSGIHandler()</code>，继承于<code>class WSGIHandler(base.BaseHandler)</code>，然后会执行run:</p></li><li><p>而run就是启动一个线程一直监听，其中<code>wsgi_handler</code>是<code>WSGIHandler()</code>，<code>server_cls=WSGIServer</code>是继承于<code>class WSGIServer(simple_server.WSGIServer, object)</code>，而<code>simple_server</code>来自于<code>from wsgiref import simple_server</code>，而wsgiref就是Python内置的一个WSGI服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer):</span><br><span class="line">    server_address = (addr, port)</span><br><span class="line">    if threading:</span><br><span class="line">        httpd_cls = type(str(&apos;WSGIServer&apos;), (socketserver.ThreadingMixIn, server_cls), &#123;&#125;)</span><br><span class="line">    else:</span><br><span class="line">        httpd_cls = server_cls</span><br><span class="line">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class="line">    if threading:</span><br><span class="line">        # ThreadingMixIn.daemon_threads indicates how threads will behave on an</span><br><span class="line">        # abrupt shutdown; like quitting the server by the user or restarting</span><br><span class="line">        # by the auto-reloader. True means the server will not wait for thread</span><br><span class="line">        # termination before it quits. This will make auto-reloader faster</span><br><span class="line">        # and will prevent the need to kill the server manually if a thread</span><br><span class="line">        # isn&apos;t terminating correctly.</span><br><span class="line">        httpd.daemon_threads = True</span><br><span class="line">    httpd.set_app(wsgi_handler)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure></li><li><p>wsgiref是用纯Python编写的WSGI服务器的参考实现。所谓“参考实现”是指该实现完全符合WSGI标准，但是不考虑任何运行效率，仅供开发和测试使用。</p></li></ul><p>参考文章:</p><ul><li><a href="https://www.cnblogs.com/luchuangao/articles/7374415.html" target="_blank" rel="noopener">由django.setup()引发得对Django启动过程解读</a></li><li><a href="http://www.javabin.cn/2018/django_start.html" target="_blank" rel="noopener">Django 源码学习之搭建环境和django启动流程(一)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web框架本质&quot;&gt;&lt;a href=&quot;#Web框架本质&quot; class=&quot;headerlink&quot; title=&quot;Web框架本质&quot;&gt;&lt;/a&gt;Web框架本质&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;对于所有的Web应用，本质上其实就是一个socket服务端，用户的浏览器其实就是一个socket客户端。对于真实开发中的python web程序来说，一般会分为两部分：&lt;strong&gt;服务器程序&lt;/strong&gt;和&lt;strong&gt;应用程序&lt;/strong&gt;。服务器程序负责对socket服务器进行封装，并在请求到来时，对请求的各种数据进行整理。应用程序则负责具体的逻辑处理。&lt;br&gt;
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>使用vagrant搭建虚拟开发环境</title>
    <link href="http://yoursite.com/2018/09/10/%E4%BD%BF%E7%94%A8vagrant%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/09/10/使用vagrant搭建虚拟开发环境/</id>
    <published>2018-09-10T13:51:45.000Z</published>
    <updated>2018-10-26T01:27:36.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p>通过镜像文件创建虚拟环境:</p><ul><li>virtualbox</li><li>VMware</li></ul><h1 id="什么是Vagrant"><a href="#什么是Vagrant" class="headerlink" title="什么是Vagrant"></a>什么是Vagrant</h1><p>&emsp;&emsp;Vagrant是构建在虚拟化技术之上的虚拟机运行环境管理工具,它的运行依赖于虚拟机：</p><blockquote><p>建立和删除虚拟机<br>配置虚拟机运行参数<br>管理虚拟机运行状态<br>自动化配置和安装开发环境<br>打包分发虚拟机运行环境</p></blockquote><p><strong>优点</strong><br>&emsp;&emsp;跨平台、可移动、自动化部署无需人工干预<br><img src="http://qiniu.rearib.top/使用vagrant搭建虚拟开发环境/20180910100227928.png" alt=""></p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><ul><li>virtualbox</li><li>vagrant(注意vagrant和virtualbox之间的版本关系)</li><li>xshell</li></ul><h1 id="vagrant命令"><a href="#vagrant命令" class="headerlink" title="vagrant命令"></a>vagrant命令</h1><p>虚拟机的本质底层还是一个操作系统，使用虚拟机创建虚拟环境使用.iso文件，vagrant创建虚拟环境使用.box文件。</p><h2 id="vagrant常用命令："><a href="#vagrant常用命令：" class="headerlink" title="vagrant常用命令："></a>vagrant常用命令：</h2><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">vagrant box list</td><td style="text-align:center">查看目前已有的box</td></tr><tr><td style="text-align:center">vagrant box add</td><td style="text-align:center">新增加一个box</td></tr><tr><td style="text-align:center">vagrant box remove</td><td style="text-align:center">删除指定box</td></tr><tr><td style="text-align:center">vagrant init</td><td style="text-align:center">初始化配置vagrantfile</td></tr><tr><td style="text-align:center">vagrant up</td><td style="text-align:center">启动虚拟机</td></tr><tr><td style="text-align:center">vagrant ssh</td><td style="text-align:center">ssh登录虚拟机</td></tr><tr><td style="text-align:center">vagrant suspend</td><td style="text-align:center">挂起虚拟机</td></tr><tr><td style="text-align:center">vagrant reload</td><td style="text-align:center">重启虚拟机</td></tr><tr><td style="text-align:center">vagrant halt</td><td style="text-align:center">关闭虚拟机</td></tr><tr><td style="text-align:center">vagrant status</td><td style="text-align:center">查看虚拟机状态</td></tr><tr><td style="text-align:center">vagrant status</td><td style="text-align:center">删除虚拟机</td></tr></tbody></table><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><ol><li>虚拟机创建的创建和查看<br>&emsp;&emsp;Vagrant使用基础镜像来快速克隆虚拟机，而不是从头开始构建虚拟机。这些基础镜像在 Vagrant 中被称为“box”，并且指定用于 Vagrant 环境的 box 始终是创建新 Vagrantfile 后的第一步。<br>下载好.box文件后使用<strong>vagrant box add 虚拟环境名称 box文件名</strong>创建虚拟环境<br><img src="http://qiniu.rearib.top/使用vagrant搭建虚拟开发环境/20180910110255933.png" alt=""></li><li>新建imooc文件夹，进入文件夹，初始化配置vagrantfile，此时会生成一个vagrantfile文件<br><img src="http://qiniu.rearib.top/使用vagrant搭建虚拟开发环境/20180910111231943.png" alt=""></li><li>执行vagrant up，会在virtualbox中多一个虚拟环境实例，但是命令行一直会提示<br><img src="http://qiniu.rearib.top/使用vagrant搭建虚拟开发环境/20180910112728939.png" alt=""></li><li>这是由于虚拟机获取不到物理机的公钥,</li></ol><h2 id="创建Vagrantfile文件"><a href="#创建Vagrantfile文件" class="headerlink" title="创建Vagrantfile文件"></a>创建Vagrantfile文件</h2><p>&emsp;&emsp;配置 Vagrant 项目的第一步是创建 Vagrantfile 文件。Vagrantfile 文件的目的有两个：</p><blockquote><p>设置项目的根目录。Vagrant 中的许多配置选项是相对于这个根目录的。<br>描述运行项目的机器类型和资源，以及需要安装的软件和访问方式。</p></blockquote><p>&emsp;&emsp;Vagrant 内置了 vagrant init 命令，用于将目录初始化为 Vagrant 使用。请在你的终端中输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir vagrant_getting_started</span><br><span class="line">$ cd vagrant_getting_started</span><br><span class="line">$ vagrant init</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;命令执行完后会在你的目录中创建 Vagrantfile 文件。可以查看这个文件，里面写满了注释和示例。虽然看起来很吓人，但不要害怕，我们会尽快修改它。<br>&emsp;&emsp;也可以在预先存在的目录中使用 vagrant init 命令配置已经存在的项目使用 Vagrant。<br>&emsp;&emsp;如果你使用版本控制，则 Vagrantfile 可以用于项目的版本控制。这样，每个与该项目合作的人都可以从 Vagrant 中受益，而无需任何前期工作.</p><h2 id="box的安装与使用"><a href="#box的安装与使用" class="headerlink" title="box的安装与使用"></a>box的安装与使用</h2><p>&emsp;&emsp;Vagrant 使用基础镜像来快速克隆虚拟机，而不是从头开始构建虚拟机。这些基础镜像在 Vagrant 中被称为“box”，并且指定用于 Vagrant 环境的 box 始终是创建新 Vagrantfile 后的第一步。</p><ul><li>安装 box<br>通过<code>vagrant box add</code>命令可以将 box 加入到 Vagrant。这会将 box 存储在一个特定的名称下，以便多个 Vagrant 环境可以重复利用。如果你还没有添加一个 box，可以这样做：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add hashicorp/precise64</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;这将从 HashiCorp 的 Vagrant Cloud box 目录 下载名为“hashicorp/precise64”的 box。虽然从 HashiCorp 的 Vagrant Cloud下载 box 是最便利的方式，你也可以从本地文件或指定的 URL 等添加 box。<br>&emsp;&emsp;对于当前用户，box 全局存储。每个项目都使用一个 box 作为初始镜像来克隆，并且从不修改基本镜像。这意味着如果你有两个项目都使用我们刚刚添加的 hashicorp/precise64 这个 box，则在一台 guest 机器中添加文件将不会对另一台机器产生影响。<br>&emsp;&emsp;在上面的命令中，你会注意到这些 box 是有命名空间的。box 分为两部分 - 用户名和 box 名 - 用斜线分隔。在上面的例子中，用户名是“hashicorp”，并且 box 是“precise64”。也可以通过 URL 或本地文件路径来指定 box，但入门指南中不会涉及这些内容。</p><blockquote><p>命名空间不保证规范 box！一个常见的误解是像“ubuntu”这样的命名空间代表了 Ubuntu 这个 box 的规范空间。这是不真实的。Vagrant Cloud上的命名空间的行为与 GitHub 上的命名空间非常相似。正如 GitHub 的支持团队无法协助解决某人存储库中的问题一样，HashiCorp 的支持团队无法管理第三方发布的 box。</p></blockquote><ul><li>使用 box<br>&emsp;&emsp;现在 box 已经添加到了 Vagrant，需要配置项目使用这个 box 作为基准镜像。打开空白的 Vagrantfile 文件添加下面的内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;hashicorp/precise64&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;这个例子中的“hashicorp/precise64”必须要跟你在上面添加的 box 名字匹配。通过这个配置，Vagrant 知道需要使用哪个 box。如果之前没有添加 box，Vagrant 会在运行时自动下载并添加 box。<br>&emsp;&emsp;可以通过 config.vm.box_version 来指定一个 box 的确切版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;hashicorp/precise64&quot;</span><br><span class="line">  config.vm.box_version = &quot;1.1.0&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;也可以直接使用 config.vm.box_url 指定一个 box 的 URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;hashicorp/precise64&quot;</span><br><span class="line">  config.vm.box_url = &quot;http://files.vagrantup.com/precise64.box&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>在下一节中，我们将启动 Vagrant 环境并与其进行一点互动。</p><ul><li>查找更多的 box<br>&emsp;&emsp;对于本入门指南的其余部分，我们将仅使用之前添加的“hashicorp/precise64” box。但是在完成入门指南后，第一个问题可能就是“我在哪里可以找到更多的 box？”<br>&emsp;&emsp;HashiCorp 的 Vagrant Cloud box 目录 是寻找更多 box 的最佳地点。HashiCorp 的 Vagrant Cloud 有一个可以通过各种平台和技术免费使用的公共目录。HashiCorp 的 Vagrant Cloud 也有很好的搜索功能，可以让你找到你关心的 box。<br>&emsp;&emsp;除了寻找免费的 box，HashiCorp 的 Vagrant Cloud 允许你托管自己的 box，如果打算为自己的组织创建 box 的话还可以创建私有 box。</li></ul><h2 id="启动-vagrant-及-通过-ssh-登录虚拟机"><a href="#启动-vagrant-及-通过-ssh-登录虚拟机" class="headerlink" title="启动 vagrant 及 通过 ssh 登录虚拟机"></a>启动 vagrant 及 通过 ssh 登录虚拟机</h2><p>&emsp;&emsp;在终端运行 vagrant up 命令即可启动 Vagrant 环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;不到一分钟，命令就会执行完毕，运行 Ubuntu 的虚拟机会启动成功。Vagrant 运行虚拟机的时候没有 UI 界面。可以通过 SSH 连接到机器判断机器是否运行成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这个命令会让你进入一个完整的 SSH 会话。会话建立后可以与机器进行交互，做任何你想做的事情。要小心 rm -rf /，因为 Vagrant 与包含 Vagrantfile 的主机上的目录共享一个 /vagrant 目录，这会删除所有这些文件。共享文件夹将在下一节介绍。<br>&emsp;&emsp;花点时间思考刚刚发生的事情：通过终端中的一行配置和一条命令，我们创建了一个功能齐全的，可通过 SSH 访问的虚拟机。SSH 会话可以用 CTRL + D 终止。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant@precise64:~$ logout</span><br><span class="line">Connection to 127.0.0.1 closed.</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;完成了需要使用虚拟机的工作后，在你的主机上运行 vagrant destroy，Vagrant 将终止虚拟机使用任何资源。<br>&emsp;&emsp;<code>vagrant destroy</code> 命令实际上并不删除下载的 box 文件。可以使用<code>vagrant box remove</code> 命令彻底删除 box 文件。</p><h2 id="同步目录（synced-folders）"><a href="#同步目录（synced-folders）" class="headerlink" title="同步目录（synced folders）"></a>同步目录（synced folders）</h2><p>&emsp;&emsp;尽管可以非常轻松的启动一台虚拟机，但很少有人希望通过 SSH 使用基于终端的编辑器来编辑文件。幸运的是，借助 Vagrant 你不需要这样做。通过使用同步目录，Vagrant 会自动同步 guest 机器上的文件。<br>&emsp;&emsp;默认情况下，Vagrant 将你的项目的目录（即 Vagrantfile 的目录）共享到 guest 中的 /vagrant 目录。<br>&emsp;&emsp;<strong>注意，当使用 vagrant ssh 目录进入机器时，默认进入 /home/vagrant 目录。  /home/vagrant 是与同步的 /vagrant 目录不同的目录。</strong><br>&emsp;&emsp;如果终端报错，提示不兼容 guest additions（或没有 guest additions），那么可能需要更新 box 或选择不同的 box，如 hashicorp/precise64。一些用户成功使用了 vagrant-vbguest 插件，但它并未得到 Vagrant 核心团队的正式支持。<br>&emsp;&emsp;再次运行 vagrant up 启动 vagrant，然后通过 vagrant ssh 进入机器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">...</span><br><span class="line">$ vagrant ssh</span><br><span class="line">...</span><br><span class="line">vagrant@precise64:~$ ls /vagrant</span><br><span class="line">Vagrantfile</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;不管你信不信，你在虚拟机中看到的 Vagrantfile 文件实际上是你宿主机上的同一个文件。下面证明一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vagrant@precise64:~$ touch /vagrant/foo</span><br><span class="line">vagrant@precise64:~$ exit</span><br><span class="line">$ ls</span><br><span class="line">foo Vagrantfile</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;现在，“foo”文件会出现在你的宿主机上。你可以看到，Vagrant 保证了这个目录的同步。<br>&emsp;&emsp;通过同步目录，你可以继续使用宿主机上你自己的编辑器，对宿主机中文件的改动会自动同步到 guest 机器中。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>&emsp;&emsp;现在我们已经有了一个运行 Ubuntu 的虚拟机，并且可以在宿主机上编辑文件并自动同步到虚拟机。现在让我们安装一个 web 服务器，通过服务器访问这些文件。<br>&emsp;&emsp;可以通过 SSH 进入并安装一个 web 服务器并开始工作，但每个使用 Vagrant 的人都必须这样做。相反，Vagrant 内置了对自动配置的支持。使用此功能时，Vagrant 将在执行 vagrant up 时自动安装软件，以便 guest 机器可以重复创建并可立即使用。</p><ol><li>安装 Apache<br>&emsp;&emsp;可以通过 shell 脚本来为刚才的项目设置 Apache。创建下面的 shell 脚本并命名为 bootstrap.sh，保存在 Vagrantfile 文件相同的目录下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y apache2</span><br><span class="line">if ! [ -L /var/www ]; then</span><br><span class="line">  rm -rf /var/www</span><br><span class="line">  ln -fs /vagrant /var/www</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;然后，配置 Vagrant 在设置机器的时候运行这个脚本。编辑 Vagrantfile 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;hashicorp/precise64&quot;</span><br><span class="line">  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;“provision” 行是新添加的，告诉 Vagrant 使用 shell 命令执行 bootstrap.sh 文件来设置虚拟机。文件路径是相对于 Vagrantfile 文件所在的项目根目录的相对路径。</p><ol start="2"><li>配置<br>&emsp;&emsp;配置写完后，执行 vagrant up，Vagrant 会自动配置。可以在终端看到 shell 脚本的输出。如果虚拟机已经启动了，则需要执行 vagrant reload –provision，这会快速重启虚拟机并跳过初始化导入阶段。因为 Vagrant 只会在第一次 vagrant up 启动虚拟机的时候自动运行 provisioner，所以需要在 reload 命令中使用 provision 标志指示 Vagrant 必须运行 provisioner。<br>&emsp;&emsp;Vagrant 运行结束后，web 服务器会成功运行。现在还不能在宿主机的浏览器上查看网页，但可以在通过 SSH 进入虚拟机后，通过加载文件来判断配置是否生效：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br><span class="line">...</span><br><span class="line">vagrant@precise64:~$ wget -qO- 127.0.0.1</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;上面例子会正常工作。我们安装 Apache 并设置其默认的 DocumentRoot 指向我们的 /vagrant 这个默认的同步目录。<br>&emsp;&emsp;可以创建更多文件并在终端查看，下一步需要配置网络选项以便用宿主机的浏览器访问虚拟机。</p><blockquote><p>对于复杂的配置脚本，将自定义的 Vagrant box 与预先安装的软件包打包在一起，而不是每次构建它们可能会更高效。入门指南未涵盖此主题，但可以在 自定义 box 文档中找到该主题。</p></blockquote><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>&emsp;&emsp;现在，我们启动了 web 服务器，并且通过同步目录使用宿主机上的文件提供服务。然而，还只能通过虚拟机中的终端访问服务器。这一章节中，我们会使用 Vagrant 的网络特性，配置 Vagrant 以便从宿主机访问服务器。</p><ul><li><p>端口转发（Port Forwarding）<br>&emsp;&emsp;配置文件中支持端口转发选项。通过端口转发，可以在访问宿主机的某个端口时，自动将流量转发到虚拟机的指定端口。<br>&emsp;&emsp;编辑 Vagrantfile 文件即可实现端口转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  config.vm.box = &quot;hashicorp/precise64&quot;</span><br><span class="line">  config.vm.provision :shell, path: &quot;bootstrap.sh&quot;</span><br><span class="line">  config.vm.network :forwarded_port, guest: 80, host: 4567</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>  &emsp;&emsp;运行 vagrant reload 或 vagrant up（取决于虚拟机是否已经启动）加载配置。<br>&emsp;&emsp;一旦虚拟机启动成功，在宿主机的浏览器中访问 <a href="http://127.0.0.1:4567。你应该看到虚拟机中的" target="_blank" rel="noopener">http://127.0.0.1:4567。你应该看到虚拟机中的</a> web 服务器提供的网页。</p></li><li>其他网络<br>Vagrant 还有其他网络配置选项，可以为虚拟机分配静态 IP 地址，或将虚拟机桥接到一个已经存在的网络上。更多资料参考<a href="https://www.vagrantup.com/docs/networking/" target="_blank" rel="noopener">这里</a>。</li></ul><h2 id="share"><a href="#share" class="headerlink" title="share"></a>share</h2><p>&emsp;&emsp;译者注：Vagrant Share 功能通过 ngrok 向所有人提供访问内网开发环境的能力。<br>&emsp;&emsp;现在我们已经启动并运行了一台 Web 服务器，并且可以从你的机器访问，我们拥有一个相当实用的开发环境。但除了提供开发环境外，Vagrant 还可以轻松地在这些环境中共享和协作。Vagrant 中实现这个功能的特性叫做 Vagrant Share。<br>&emsp;&emsp;Vagrant Share 使你可以通过网络向任何人共享 Vagrant 环境。这个功能会提供一个 URL 给你，任何人都可以通过这个 URL 路由到你的 Vagrant 环境。<br>&emsp;&emsp;运行 vagrant share：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant share</span><br><span class="line">...</span><br><span class="line">==&gt; default: Creating Vagrant Share session...</span><br><span class="line">==&gt; default: HTTP URL: http://b1fb1f3f.ngrok.io</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;每个人的 URL 都是不同的。复制你的 URL，通过浏览器访问即可。<br>&emsp;&emsp;如果你修改了共享目录中的文件，刷新 URL 后你会发现更新实时生效。这个 URL 直接路由到你的 Vagrant 环境，可以在世界上任意地点访问。<br>&emsp;&emsp;在终端中通过 Ctrl + C 结束共享会话。可以再次刷新 URL 来验证开发环境是否仍在共享中。<br>&emsp;&emsp;Vagrant Share 比简单的 HTTP 共享更加强大。详情参考 Vagrant Share 文档。</p><h2 id="清理（teardown）"><a href="#清理（teardown）" class="headerlink" title="清理（teardown）"></a>清理（teardown）</h2><p>&emsp;&emsp;我们现在有一个功能齐全的虚拟机，可以用于基本 Web 开发。但如果现在需要更换设备，或者在另一个项目上工作，如何清理我们的开发环境？<br>&emsp;&emsp;借助 Vagrant，可以暂停（suspend），停止（halt）或销毁（destroy）虚拟机。每个选项都有优点和缺点。选择最适合的即可。</p><ul><li>暂停（suspend）：通过调用 vagrant suspend 命令可以暂停虚拟机，此时会保存虚拟机当前运行状态并停止运行。当准备好再次工作时，运行 vagrant up 命令即可从上次暂停的状态恢复。这个方法的最大优点就是快，只要 5 到 10 秒就可以停止并开始工作。缺点是虚拟机仍占用磁盘空间，并且需要消耗更大的磁盘空间来保存虚拟机的 RAM 状态。</li><li>停止（halt）：通过调用 vagrant halt 命令可以优雅关闭虚拟机操作系统并断电。需要再次启动的时候，运行 vagrant up 命令即可。这个方法的好处是会干净地关闭你的机器，保存磁盘的内容，并让它再次干净地启动。缺点是冷启动需要较长时间，且虚拟机仍占用磁盘空间。</li><li>销毁（destroy）：通过调用 vagrant destroy 销毁虚拟机，这将从宿主机中删除虚拟机的所有痕迹。它会停止虚拟机，关闭它并删除其所有硬盘资源。当你准备好再次工作时，运行 vagrant up 命令即可。这样做的好处是，宿主机上不会留下残余物。虚拟机消耗的磁盘空间和 RAM 将被回收，并且主机保持清洁。缺点是，由于需要重新导入虚拟机并重新配置，因此需要更多时间。</li></ul><p><a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟机&quot;&gt;&lt;a href=&quot;#虚拟机&quot; class=&quot;headerlink&quot; title=&quot;虚拟机&quot;&gt;&lt;/a&gt;虚拟机&lt;/h1&gt;&lt;p&gt;通过镜像文件创建虚拟环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virtualbox&lt;/li&gt;
&lt;li&gt;VMware&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="项目部署" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>django-扩展Django自带User模型，实现用户注册与登录</title>
    <link href="http://yoursite.com/2018/09/03/django-%E6%89%A9%E5%B1%95Django%E8%87%AA%E5%B8%A6User%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E4%B8%8E%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2018/09/03/django-扩展Django自带User模型，实现用户注册与登录/</id>
    <published>2018-09-03T09:04:04.000Z</published>
    <updated>2018-10-26T01:25:58.540Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;用户的注册与登陆是一个网站应该具有的基本功能。前面的文章讲解了django自带的auth模块并使用第三方库完成登录注册等功能，今天来好好聊一聊如何扩展扩展Django自带User模型，并自己实现登录注册等功能。</p><h1 id="扩展自带User模型"><a href="#扩展自带User模型" class="headerlink" title="扩展自带User模型"></a>扩展自带User模型</h1><p>&emsp;&emsp;我们需要实现用户登录注册功能就要先设计user表，如果django原有的user表不满足项目需求可以重新设计user表。</p><ul><li>已有字段:<blockquote><p>id: 主键<br>username 用户名，该字段不要随便改动<br>password 密码<br>email 邮箱<br>first_name：名<br>last_name：姓<br>last_login Django自动记录用户最后登录时间<br>is_superuser 表明用户是否是超级用户,默认是False(后台管理会用到)<br>is_staff 表示是否是员工，默认是False(后台管理会用到)<br>is_active 用户是否是激活状态，默认是True<br>date_joined 注册时间，系统自动生成。</p></blockquote></li></ul><h2 id="继承AbstractUser的方式"><a href="#继承AbstractUser的方式" class="headerlink" title="继承AbstractUser的方式"></a>继承AbstractUser的方式</h2><ul><li>自定义user表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (&apos;male&apos;,&apos;男&apos;),</span><br><span class="line">        (&apos;female&apos;,&apos;女&apos;)</span><br><span class="line">    )</span><br><span class="line">    nick_name = models.CharField(&apos;昵称&apos;,max_length=50,default=&apos;&apos;)</span><br><span class="line">    birthday = models.DateField(&apos;生日&apos;,null=True,blank=True)</span><br><span class="line">    gender = models.CharField(&apos;性别&apos;,max_length=10,choices=gender_choices,default=&apos;female&apos;)</span><br><span class="line">    adress = models.CharField(&apos;地址&apos;,max_length=100,default=&apos;&apos;)</span><br><span class="line">    mobile = models.CharField(&apos;手机号&apos;,max_length=11,null=True,blank=True)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;image/%Y%m&apos;,default=&apos;image/default.png&apos;,max_length=100)</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户信息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></li><li><p>然后再setting.py中修改:</p><blockquote><p>AUTH_USER_MODEL = ‘users.UserProfile’</p></blockquote></li><li><p>执行makemigrations和migrate生成数据表:</p><blockquote><p>python manage.py makemigrations<br>python manage.py migrate</p></blockquote></li><li><p>特别要注意图片和文件model需要指出上传地址upload_to</p><blockquote><p>image = models.ImageField(‘轮播图’,upload_to=’banner/%Y%m’,max_length=100)<br>download = models.FileField(“资源文件”,upload_to=”course/resource/%Y/%m”,max_length=100)</p></blockquote></li><li><p>图片上传需要安装第三方库</p><blockquote><p>pip install pillow</p></blockquote></li></ul><h2 id="使用1对1方式"><a href="#使用1对1方式" class="headerlink" title="使用1对1方式"></a>使用1对1方式</h2><p>我们创建一个UserProfile模型，它只是对User模型的扩展, 与User是1对1的关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">class UserProfile(models.Model):</span><br><span class="line">    # 与User是1对1关系</span><br><span class="line">    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=&apos;profile&apos;)</span><br><span class="line">    org = models.CharField(&apos;Organization&apos;, max_length=128, blank=True)</span><br><span class="line">    telephone = models.CharField(&apos;Telephone&apos;, max_length=50, blank=True)</span><br><span class="line">    mod_date = models.DateTimeField(&apos;Last modified&apos;, auto_now=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;User Profile&apos;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user</span><br></pre></td></tr></table></figure></p><p>然后你可以在终端输入以下命令，就可以创建UserProfile的数据表。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations </span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></p><h1 id="登录注册功能的实现"><a href="#登录注册功能的实现" class="headerlink" title="登录注册功能的实现"></a>登录注册功能的实现</h1><h2 id="配置url"><a href="#配置url" class="headerlink" title="- 配置url"></a>- 配置url</h2><blockquote><p>url(r’^accounts/‘, include(‘users.urls’)),</p></blockquote><figure class="highlight plain"><figcaption><span>users.urls</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^register/$&apos;, views.register, name=&apos;register&apos;),</span><br><span class="line">url(r&apos;^login/$&apos;, views.login, name=&apos;login&apos;),</span><br><span class="line">url(r&apos;^logout/$&apos;, views.logout, name=&apos;logout&apos;),</span><br><span class="line">url(r&apos;^user/(?P&lt;pk&gt;\d+)/profile/$&apos;, views.profile, name=&apos;profile&apos;),</span><br><span class="line">url(r&apos;^user/(?P&lt;pk&gt;\d+)/profile/update/$&apos;,views.profile_update,name=&apos;profile_update&apos;),</span><br><span class="line">url(r&apos;^user/(?P&lt;pk&gt;\d+)/pwdchange/$&apos;, views.pwd_change,name=&apos;pwd_change&apos;),</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;用户的注册与登陆是一个网站应该具有的基本功能。前面的文章讲解了django自带的auth模块并使用第三方库完成登录注册等功能，今天来好好聊一聊如何扩展扩展Django自带User模型，并自己实现登录注册等功能。&lt;/p&gt;
&lt;h1 id=&quot;扩展自带Use
      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="http://yoursite.com/2018/09/03/Docker%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/09/03/Docker入门/</id>
    <published>2018-09-03T09:03:44.000Z</published>
    <updated>2018-10-26T01:50:49.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h1><p>&emsp;&emsp;Docker是开发人员和系统管理员使用容器进行开发，部署和运行应用程序的平台。使用Linux容器部署应用程序称为容器化。<br><a id="more"></a><br>&emsp;&emsp;容器化越来越受欢迎，因为容器是：</p><ul><li>灵活：即使是最复杂的应用也可以集装箱化。</li><li>轻量级：容器利用并共享主机内核。</li><li>可互换：您可以即时部署更新和升级。</li><li>便携式：您可以在本地构建，部署到云，并在任何地方运行。</li><li>可扩展：您可以增加并自动分发容器副本。</li><li>可堆叠：您可以垂直和即时堆叠服务。</li></ul><h2 id="图像和容器"><a href="#图像和容器" class="headerlink" title="图像和容器"></a>图像和容器</h2><p>&emsp;&emsp;通过运行image启动容器。一个image是一个可执行的包，其中包括运行应用程序所需的所有代码，以及运行时的库，环境变量和配置文件。</p><h2 id="容器和虚拟机"><a href="#容器和虚拟机" class="headerlink" title="容器和虚拟机"></a>容器和虚拟机</h2><p>&emsp;&emsp;容器在Linux上本机运行，与其他容器共享主机的内核。它运行一个独立的进程，不占用任何其他可执行文件的内存，使其轻量级。相比之下，虚拟机（VM）运行一个完整的“客户”操作系统，通过虚拟机管理程序对主机资源进行虚拟访问。通常，VM提供的环境比大多数应用程序需要的资源更多。</p><h2 id="测试Docker版本"><a href="#测试Docker版本" class="headerlink" title="测试Docker版本"></a>测试Docker版本</h2><p>&emsp;&emsp;运行docker –version并确保您拥有受支持的Docker版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">Docker version 17.12.0-ce, build c97c6d6</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;运行docker info或（docker version不–）查看有关docker安装的更多详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br><span class="line"></span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 17.12.0-ce</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;要避免权限错误（以及使用sudo），请将您的用户添加到docker组中。阅读更多。</p><h2 id="测试Docker安装"><a href="#测试Docker安装" class="headerlink" title="测试Docker安装"></a>测试Docker安装</h2><p>&emsp;&emsp;通过运行简单的Docker镜像hello-world来测试您的安装是否有效 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image &apos;hello-world:latest&apos; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;列出hello-world下载到您的计算机的图像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;列出hello-world在显示其消息后退出的容器（由图像生成）。如果它仍在运行，您将不需要–all选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls --all</span><br><span class="line"></span><br><span class="line">CONTAINER ID     IMAGE           COMMAND      CREATED            STATUS</span><br><span class="line">54f4984ed6a8     hello-world     &quot;/hello&quot;     20 seconds ago     Exited (0) 19 seconds ago</span><br></pre></td></tr></table></figure></p><h2 id="Docker指令"><a href="#Docker指令" class="headerlink" title="Docker指令"></a>Docker指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">## List Docker CLI commands</span><br><span class="line">docker</span><br><span class="line">docker container --help</span><br><span class="line"></span><br><span class="line">## Display Docker version and info</span><br><span class="line">docker --version</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line">## Execute Docker image</span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">## List Docker images</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line">## List Docker containers (running, all, all in quiet mode)</span><br><span class="line">docker container ls</span><br><span class="line">docker container ls --all</span><br><span class="line">docker container ls -aq</span><br></pre></td></tr></table></figure><h2 id="新的开发环境"><a href="#新的开发环境" class="headerlink" title="新的开发环境"></a>新的开发环境</h2><p>&emsp;&emsp;在过去，如果您要开始编写Python应用程序，那么首先需要在你的计算机上安装Python运行环境。而且该环境需要非常适合你的应用程序按预期运行，并且还需要与你的生产环境相匹配。<br>&emsp;&emsp;如果使用Docker，你可以将可移植的Python运行环境时作为映像获取，无需安装。 然后，您的构建可以在应用程序代码旁边包含基本Python映像，确保您的应用程序，其依赖项和运行时都一起运行。<br>&emsp;&emsp;这些可移植图像由称为Dockerfile的东西定义。</p><h2 id="在win创建并运行一个容器"><a href="#在win创建并运行一个容器" class="headerlink" title="在win创建并运行一个容器"></a>在win创建并运行一个容器</h2><ol><li><p>Dockerfile<br>&emsp;&emsp;创建一个空目录。cd进入该目录，创建一个名为Dockerfile的文件，将以下内容复制并粘贴到该文件中，然后保存。<strong>Dockerfile命名必须为“Dockerfile”，Docker镜像构建时，会查找指定目录中的Dockerfile。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Use an official Python runtime as a parent image</span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"># Set the working directory to /app</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># Copy the current directory contents into the container at /app</span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line"># Install any needed packages specified in requirements.txt</span><br><span class="line">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class="line"></span><br><span class="line"># Make port 80 available to the world outside this container</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># Define environment variable</span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure></li><li><p>应用程序本身<br>&emsp;&emsp;再创建两个文件，requirements.txt和app.py</p><figure class="highlight plain"><figcaption><span>requirements.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from redis import Redis, RedisError</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">#Connect to Redis</span><br><span class="line">redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    try:</span><br><span class="line">        visits = redis.incr(&quot;counter&quot;)</span><br><span class="line">    except RedisError:</span><br><span class="line">        visits = &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span><br><span class="line"></span><br><span class="line">    html = &quot;&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;&quot;</span><br><span class="line">    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;, port=80)</span><br></pre></td></tr></table></figure></li><li>构建应用程序<br>&emsp;&emsp;我们准备构建应用程序。确保您仍处于新目录的顶层。这是ls应该显示的内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Dockerfileapp.pyrequirements.txt</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;现在运行build命令。这会创建一个Docker镜像，我们将使用-t它来标记，因此它具有友好的名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;你的构建的镜像将位于您机器的本地Docker镜像注册表中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID</span><br><span class="line">friendlyhello         latest              326387cea398</span><br></pre></td></tr></table></figure></p><p>4.运行该应用程序<br>&emsp;&emsp;运行应用程序，使用以下方法将计算机的端口4000映射到容器的已发布端口80 -p：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;浏览器打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . 就可以访问hello world.<br><strong> 1. 如果使用win,请使用Docker Machine IP而不是localhost。例如，http：//192.168.99.100：4000。要查找IP地址，请使用该命令docker-machine ip。</strong><br><img src="/django-模板的设计及常用过滤器与标签介绍/20180912015556050.png" alt=""><br><img src="/django-模板的设计及常用过滤器与标签介绍/20180912015607984.png" alt=""></p><p><strong> 2.如果在阿里云运行,需要访问IP:4000,注意要在安全组中添加规则</strong></p><h2 id="Dockerfile-Docker镜像-容器之间关系"><a href="#Dockerfile-Docker镜像-容器之间关系" class="headerlink" title="Dockerfile|Docker镜像|容器之间关系"></a>Dockerfile|Docker镜像|容器之间关系</h2><ul><li>Dockerfile：Dockerfile 是一个文本文件， 它是Docker镜像的描述文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。有了 Dockerfile，当我们需要定制自己额外的需求时，只需在 Dockerfile 上添加或者修改指令，重新生成 image 即可，省去了敲命令的麻烦。</li><li>Docker镜像： 通过Dockerfile做出来的，包含操作系统基础文件和软件运行环境，它使用分层的存储方式。</li><li>容器： 是运行起来的镜像，简单理解，Docker镜像相当于程序，容器相当于进程。<br><strong>使用 Dockerfile 定义镜像，依赖镜像来运行容器</strong><br><img src="/django-模板的设计及常用过滤器与标签介绍/20180912014224585.png" alt=""></li></ul><p>&emsp;&emsp;Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令、容器启动执行指令。一开始必须要指明所基于的镜像名称，接下来一般会说明维护者信息；后面则是镜像操作指令，例如 RUN 指令。每执行一条RUN 指令，镜像添加新的一层，并提交；最后是 CMD 指令，来指明运行容器时的操作命令。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker概念&quot;&gt;&lt;a href=&quot;#Docker概念&quot; class=&quot;headerlink&quot; title=&quot;Docker概念&quot;&gt;&lt;/a&gt;Docker概念&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Docker是开发人员和系统管理员使用容器进行开发，部署和运行应用程序的平台。使用Linux容器部署应用程序称为容器化。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>django-FBV&amp;CBV</title>
    <link href="http://yoursite.com/2018/09/02/django-FBV&amp;CBV/"/>
    <id>http://yoursite.com/2018/09/02/django-FBV&amp;CBV/</id>
    <published>2018-09-02T06:01:52.000Z</published>
    <updated>2018-10-26T01:50:19.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FBV"><a href="#FBV" class="headerlink" title="FBV"></a>FBV</h1><p>FBV（function base views） 就是在视图里使用函数处理请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^index/&apos;, views.index),</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        return HttpResponse(&quot;GET&quot;)</span><br><span class="line">    elif request.method == &quot;POST&quot;:</span><br><span class="line">        return HttpResponse(&quot;POST&quot;)</span><br></pre></td></tr></table></figure></p><blockquote><p>step1：根据访问请求，在urls寻找匹配的url映射，得到views.index<br>setp2：根据views.index ，调用views下index函数（传入参数request即用户请求信息）<br>step3：根据客户请求信息对数据进行处理，通过HttpResponse返回客户端</p></blockquote><h1 id="CBV"><a href="#CBV" class="headerlink" title="CBV"></a>CBV</h1><p>CBV（class base views） 就是在视图里使用类处理请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^index/&apos;, views.Index.as_view()),</span><br><span class="line"></span><br><span class="line">from django.views import View</span><br><span class="line">class Index(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return HttpResponse(&quot;GET&quot;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        return HttpResponse(&quot;POST&quot;)</span><br></pre></td></tr></table></figure></p><p>如果是get或者post都执行的代码可以放到dispatch:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def dispatch(self, request, *args, **kwargs):</span><br><span class="line">    # 调用父类中的dispatch</span><br><span class="line">    print(&apos;before&apos;)  # 类似装饰器的功能</span><br><span class="line">    result = super(Home,self).dispatch(request, *args, **kwargs)</span><br><span class="line">    print(&apos;after&apos;)  # 类似装饰器的功能</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure></p><p>其实CBV过程可以看成是FBV过程的抽象化、对象化。他需要最基本的三个类View，ContextMixin，TemplateResponseMixin<br>对应FBV的三个步骤：</p><blockquote><p>step1. View类提供类方法as_view(),用于调用dipatch()，根据request类型分发给get，post…等对应方法处理。<br>step2. ContextMixin类，get_context_data(self, **kwargs)获取上下文数据，如果对数据库进行操作均可以继承该类，然后将增删改查的结果放入上下文数据中（即重写get_context_data）<br>step3. TemplateResponseMixin类，将内容渲染到指定模板上，通过render_to_response()方法实现对应功能<br>而其他模板视图基本就是在这三个类上进行继承重写后得到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FBV&quot;&gt;&lt;a href=&quot;#FBV&quot; class=&quot;headerlink&quot; title=&quot;FBV&quot;&gt;&lt;/a&gt;FBV&lt;/h1&gt;&lt;p&gt;FBV（function base views） 就是在视图里使用函数处理请求。&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
</feed>

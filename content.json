[{"title":"Django+xadmin打造在线教育平台-用户登录注册功能的实现","date":"2018-09-01T05:11:33.000Z","path":"2018/09/01/Django-xadmin打造在线教育平台-用户登录注册功能的实现/","text":"","tags":[]},{"title":"Django+xadmin打造在线教育平台-xadmin的使用","date":"2018-09-01T05:10:09.000Z","path":"2018/09/01/Django-xadmin打造在线教育平台-xadmin的使用/","text":"","tags":[]},{"title":"Django+xadmin打造在线教育平台-django基本设置和model设计","date":"2018-09-01T05:09:09.000Z","path":"2018/09/01/Django+xadmin打造在线教育平台-django基本设置和model设计/","text":"&emsp;&emsp;在学习了一段时间的django框架后，也做了几个较为完整的项目，现将整个的过程做个记录和整理，也算是进行一次章节和回顾吧。接下来几天将从项目工程创建到linux服务器部署中较为关键的点进行记录和总结。 开发环境和开发平台 win10 Pycharm python3.6.2 django1.11.6 虚拟环境的安装与使用 virtualenv的安装：在win下使用pip install virtualenv执行安装,安装成功后使用pip list可以查看到版本信息 在需要创建虚拟环境的目录下执行virtualenv testvir就可以创建一个虚拟环境. cd 进入虚拟环境目录,通过dir查看该目录下文件,cd Scripts,执行activate可以激活虚拟环境,执行deactivate.bat可以退出虚拟环境 virtualenvwrapper可以进行虚拟环境的管理 win下安装pip install virtualenvwrapper-win,安装成功后使用mkvirtualenv testEve创建虚拟环境,会提示创建的虚拟环境的位置 使用workon查看已经安装的虚拟环境,使用workon testEve,如果虚拟环境已经激活,在任何时候执行deactivate.bat就可以退出虚拟环境 新工程设置&emsp;&emsp;工程目录下创建log(日志)、media(上传文件)、templates(模板文件)、static(静态文件)，并新建setting_dev.py用于存储密码等信息，如果将项目托管于github可以把该文件放到.gitignore.&emsp;&emsp;在工程目录下新建apps用于存放所有app,此时导入需要from apps.app1 import views,可以apps右键Mark Directory As - Sources Root(全局搜索路径),然后就可以通过from app1 import views,但是Mark后Pycharm能识别,但是使用命令行无法识别,需要再在setting中添加: sys.path.inser(0,os.path.join(BASE_DIR,’apps’)) 其他配置： 数据库切换成mysql,安装mysqlclient连接myql,同时在setting_dev.py中配置数据库12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;mxonline&apos;, #数据库名字 &apos;USER&apos;: &apos;root&apos;, #账号 &apos;PASSWORD&apos;: &apos;123456&apos;, #密码 &apos;HOST&apos;: &apos;127.0.0.1&apos;, #IP &apos;PORT&apos;: &apos;3306&apos;, #端口 &#125;&#125; 在setting.py配置上传文件和静态文件的路径:123456STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = ( os.path.join(BASE_DIR,&apos;static&apos;),)MEDIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR,&apos;media&apos;) 在url中配置处理图片的视图函数1234from django.conf.urls.static import staticfrom django.conf import settingsif settings.DEBUG: urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) 修改语言和时区12345LANGUAGE_CODE = &apos;zh_hans&apos;TIME_ZONE = &apos;Asia/Shanghai&apos;USE_I18N = TrueUSE_L10N = TrueUSE_TZ = False &emsp;&emsp;根据项目要求,会有一个users、course、organization的app,同时针对用户的各种操作设计operation的app python manage.py startapp userspython manage.py startapp coursepython manage.py startapp organizationpython manage.py startapp operation model设计&emsp;&emsp;在model设计之前一定要梳理每一个model需要哪些字段,这是一个项目的关键. 用户表的设计 首先设计user表,如果django原有的user表不满足项目需求可以重新设计user表12345678910111213141516171819from django.db import modelsfrom django.contrib.auth.models import AbstractUserclass UserProfile(AbstractUser): gender_choices = ( (&apos;male&apos;,&apos;男&apos;), (&apos;female&apos;,&apos;女&apos;) ) nick_name = models.CharField(&apos;昵称&apos;,max_length=50,default=&apos;&apos;) birthday = models.DateField(&apos;生日&apos;,null=True,blank=True) gender = models.CharField(&apos;性别&apos;,max_length=10,choices=gender_choices,default=&apos;female&apos;) adress = models.CharField(&apos;地址&apos;,max_length=100,default=&apos;&apos;) mobile = models.CharField(&apos;手机号&apos;,max_length=11,null=True,blank=True) image = models.ImageField(upload_to=&apos;image/%Y%m&apos;,default=&apos;image/default.png&apos;,max_length=100) class Meta: verbose_name = &apos;用户信息&apos; verbose_name_plural = verbose_name def __str__(self): return self.username 然后再setting.py中修改: AUTH_USER_MODEL = ‘users.UserProfile’ 执行makemigrations和migrate生成数据表: python manage.py makemigrationspython manage.py migrate 特别要注意图片和文件model需要指出上传地址upload_to image = models.ImageField(‘轮播图’,upload_to=’banner/%Y%m’,max_length=100)download = models.FileField(“资源文件”,upload_to=”course/resource/%Y/%m”,max_length=100)","tags":[{"name":"django项目","slug":"django项目","permalink":"http://yoursite.com/tags/django项目/"},{"name":"Mxonline","slug":"Mxonline","permalink":"http://yoursite.com/tags/Mxonline/"}]},{"title":"常用Markdown语法说明","date":"2018-08-30T13:10:19.000Z","path":"2018/08/30/常用Markdown语法说明/","text":"Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式”编写文档，本文主要针对Hexo中Markdown常用的语法进行总结，更详细的内容请参考Hexo官方书写格式链接和Markdown书写格式链接 标题Markdown支持两种标题的语法，Setext和atx形式：Setext形式是用底线的形式，利用 = (最高阶标题)和 - (第二阶标题)。Atx形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。 最高阶标题第二阶标题H1标题H2标题H3标题H4标题H5标题H6标题区块引用区块引用则使用 email 形式的 ‘&gt;’ 角括号。 区块引用 嵌套引用 修辞和强调强调内容两侧分别加上星号或者底线。斜体粗体删除 表格 至少一个- 使用:来设置对其方式 第一列 第二列 第三列 内容 内容 内容 列表无序列表使用星号、加号或减号来做为列表。 一号 二号 三号 四号 五号 六号 有序列表 一号 二号 链接这是我的博客地址 分割线 图片图片的语法和链接很像，只需在链接的基础上前方加一个！注意图片大小的设置方式,关于其他设置可以参考七牛云 代码main.c12345int i = 0; i = 1; for (int i = 0; i &lt; 100; i++)&#123; printf(\"hello markdown!\\n\");&#125; 任务列表 选项一 选项二 选项三","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"}]}]